"use strict";

var CryptoJS = require('./crypto-js.js');

function utf16to8(str) {
  var out, i, len, c;
  out = "";
  len = str.length;
  for (i = 0; i < len; i++) {
    c = str.charCodeAt(i);
    if (c >= 0x0001 && c <= 0x007F) {
      out += str.charAt(i);
    } else if (c > 0x07FF) {
      out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);
      out += String.fromCharCode(0x80 | c >> 6 & 0x3F);
      out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
    } else {
      out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);
      out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
    }
  }
  return out;
}

function utf8to16(str) {
  var out, i, len, c;
  var char2, char3;
  out = "";
  len = str.length;
  i = 0;
  while (i < len) {
    c = str.charCodeAt(i++);
    switch (c >> 4) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        // 0xxxxxxx
        out += str.charAt(i - 1);
        break;
      case 12:
      case 13:
        // 110x xxxx 10xx xxxx
        char2 = str.charCodeAt(i++);
        out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);
        break;
      case 14:
        // 1110 xxxx 10xx xxxx 10xx xxxx
        char2 = str.charCodeAt(i++);
        char3 = str.charCodeAt(i++);
        out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);
        break;
    }
  }
  return out;
}

/*
 * Interfaces:
 * b64 = base64encode(data);
 * data = base64decode(b64);
 */
var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

function base64encode(str) {
  var out, i, len;
  var c1, c2, c3;
  len = str.length;
  i = 0;
  out = "";
  while (i < len) {
    c1 = str.charCodeAt(i++) & 0xff;
    if (i == len) {
      out += base64EncodeChars.charAt(c1 >> 2);
      out += base64EncodeChars.charAt((c1 & 0x3) << 4);
      out += "==";
      break;
    }
    c2 = str.charCodeAt(i++);
    if (i == len) {
      out += base64EncodeChars.charAt(c1 >> 2);
      out += base64EncodeChars.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);
      out += base64EncodeChars.charAt((c2 & 0xF) << 2);
      out += "=";
      break;
    }
    c3 = str.charCodeAt(i++);
    out += base64EncodeChars.charAt(c1 >> 2);
    out += base64EncodeChars.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);
    out += base64EncodeChars.charAt((c2 & 0xF) << 2 | (c3 & 0xC0) >> 6);
    out += base64EncodeChars.charAt(c3 & 0x3F);
  }
  return out;
}

function base64decode(str) {
  var c1, c2, c3, c4;
  var i, len, out;
  len = str.length;
  i = 0;
  out = "";
  while (i < len) {
    /* c1 */
    do {
      c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
    } while (i < len && c1 == -1);
    if (c1 == -1) break;
    /* c2 */
    do {
      c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
    } while (i < len && c2 == -1);
    if (c2 == -1) break;
    out += String.fromCharCode(c1 << 2 | (c2 & 0x30) >> 4);
    /* c3 */
    do {
      c3 = str.charCodeAt(i++) & 0xff;
      if (c3 == 61) return out;
      c3 = base64DecodeChars[c3];
    } while (i < len && c3 == -1);
    if (c3 == -1) break;
    out += String.fromCharCode((c2 & 0XF) << 4 | (c3 & 0x3C) >> 2);
    /* c4 */
    do {
      c4 = str.charCodeAt(i++) & 0xff;
      if (c4 == 61) return out;
      c4 = base64DecodeChars[c4];
    } while (i < len && c4 == -1);
    if (c4 == -1) break;
    out += String.fromCharCode((c3 & 0x03) << 6 | c4);
  }
  return out;
}
var safe64 = function safe64(base64) {
  base64 = base64.replace(/\+/g, "-");
  base64 = base64.replace(/\//g, "_");
  return base64;
};

function genToken(accessKey, secretKey, putPolicy) {

  var put_policy = JSON.stringify(putPolicy);
  console.log("put_policy = ", put_policy);

  //SETP 3
  var encoded = base64encode(utf16to8(put_policy));
  console.log("encoded = ", encoded);

  //SETP 4
  var hash = CryptoJS.HmacSHA1(encoded, secretKey);
  var encoded_signed = hash.toString(CryptoJS.enc.Base64);

  //SETP 5
  var upload_token = accessKey + ":" + safe64(encoded_signed) + ":" + encoded;

  return upload_token;
};

module.exports = {
  genToken: genToken
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFVwVG9rZW4uanMiXSwibmFtZXMiOlsiQ3J5cHRvSlMiLCJyZXF1aXJlIiwidXRmMTZ0bzgiLCJzdHIiLCJvdXQiLCJpIiwibGVuIiwiYyIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1dGY4dG8xNiIsImNoYXIyIiwiY2hhcjMiLCJiYXNlNjRFbmNvZGVDaGFycyIsImJhc2U2NERlY29kZUNoYXJzIiwiQXJyYXkiLCJiYXNlNjRlbmNvZGUiLCJjMSIsImMyIiwiYzMiLCJiYXNlNjRkZWNvZGUiLCJjNCIsInNhZmU2NCIsImJhc2U2NCIsInJlcGxhY2UiLCJnZW5Ub2tlbiIsImFjY2Vzc0tleSIsInNlY3JldEtleSIsInB1dFBvbGljeSIsInB1dF9wb2xpY3kiLCJKU09OIiwic3RyaW5naWZ5IiwiY29uc29sZSIsImxvZyIsImVuY29kZWQiLCJoYXNoIiwiSG1hY1NIQTEiLCJlbmNvZGVkX3NpZ25lZCIsInRvU3RyaW5nIiwiZW5jIiwiQmFzZTY0IiwidXBsb2FkX3Rva2VuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxXQUFXQyxRQUFRLGdCQUFSLENBQWpCOztBQUVBLFNBQVNDLFFBQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBQ3JCLE1BQUlDLEdBQUosRUFBU0MsQ0FBVCxFQUFZQyxHQUFaLEVBQWlCQyxDQUFqQjtBQUNBSCxRQUFNLEVBQU47QUFDQUUsUUFBTUgsSUFBSUssTUFBVjtBQUNBLE9BQUtILElBQUksQ0FBVCxFQUFZQSxJQUFJQyxHQUFoQixFQUFxQkQsR0FBckIsRUFBMEI7QUFDeEJFLFFBQUlKLElBQUlNLFVBQUosQ0FBZUosQ0FBZixDQUFKO0FBQ0EsUUFBS0UsS0FBSyxNQUFOLElBQWtCQSxLQUFLLE1BQTNCLEVBQW9DO0FBQ2xDSCxhQUFPRCxJQUFJTyxNQUFKLENBQVdMLENBQVgsQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJRSxJQUFJ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QUNELElBQUlxQixTQUFTLFNBQVRBLE1BQVMsQ0FBVUMsTUFBVixFQUFrQjtBQUM3QkEsV0FBU0EsT0FBT0MsT0FBUCxDQUFlLEtBQWYsRUFBc0IsR0FBdEIsQ0FBVDtBQUNBRCxXQUFTQSxPQUFPQyxPQUFQLENBQWUsS0FBZixFQUFzQixHQUF0QixDQUFUO0FBQ0EsU0FBT0QsTUFBUDtBQUNELENBSkQ7O0FBTUEsU0FBU0UsUUFBVCxDQUFrQkMsU0FBbEIsRUFBNkJDLFNBQTdCLEVBQXdDQyxTQUF4QyxFQUFtRDs7QUFFakQsTUFBSUMsYUFBYUMsS0FBS0MsU0FBTCxDQUFlSCxTQUFmLENBQWpCO0FBQ0FJLFVBQVFDLEdBQVIsQ0FBWSxlQUFaLEVBQTZCSixVQUE3Qjs7QUFHQTtBQUNBLE1BQUlLLFVBQVVsQixhQUFhakIsU0FBUzhCLFVBQVQsQ0FBYixDQUFkO0FBQ0FHLFVBQVFDLEdBQVIsQ0FBWSxZQUFaLEVBQTBCQyxPQUExQjs7QUFFQTtBQUNBLE1BQUlDLE9BQU90QyxTQUFTdUMsUUFBVCxDQUFrQkYsT0FBbEIsRUFBMkJQLFNBQTNCLENBQVg7QUFDQSxNQUFJVSxpQkFBaUJGLEtBQUtHLFFBQUwsQ0FBY3pDLFNBQVMwQyxHQUFULENBQWFDLE1BQTNCLENBQXJCOztBQUVBO0FBQ0EsTUFBSUMsZUFBZWYsWUFBWSxHQUFaLEdBQWtCSixPQUFPZSxjQUFQLENBQWxCLEdBQTJDLEdBQTNDLEdBQWlESCxPQUFwRTs7QUFFQSxTQUFPTyxZQUFQO0FBQ0Q7O0FBR0RDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmxCLFlBQVVBO0FBREssQ0FBakIiLCJmaWxlIjoiZ2V0VXBUb2tlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENyeXB0b0pTID0gcmVxdWlyZSgnLi9jcnlwdG8tanMuanMnKTtcblxuZnVuY3Rpb24gdXRmMTZ0bzgoc3RyKSB7XG4gIHZhciBvdXQsIGksIGxlbiwgYztcbiAgb3V0ID0gXCJcIjtcbiAgbGVuID0gc3RyLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGlmICgoYyA+PSAweDAwMDEpICYmIChjIDw9IDB4MDA3RikpIHtcbiAgICAgIG91dCArPSBzdHIuY2hhckF0KGkpO1xuICAgIH0gZWxzZSBpZiAoYyA+IDB4MDdGRikge1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFMCB8ICgoYyA+PiAxMikgJiAweDBGKSk7XG4gICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgKChjID4+IDYpICYgMHgzRikpO1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg4MCB8ICgoYyA+PiAwKSAmIDB4M0YpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhDMCB8ICgoYyA+PiA2KSAmIDB4MUYpKTtcbiAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGMgPj4gMCkgJiAweDNGKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHV0Zjh0bzE2KHN0cikge1xuICB2YXIgb3V0LCBpLCBsZW4sIGM7XG4gIHZhciBjaGFyMiwgY2hhcjM7XG4gIG91dCA9IFwiXCI7XG4gIGxlbiA9IHN0ci5sZW5ndGg7XG4gIGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKyspO1xuICAgIHN3aXRjaCAoYyA+PiA0KSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICBjYXNlIDI6XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDQ6XG4gICAgICBjYXNlIDU6XG4gICAgICBjYXNlIDY6XG4gICAgICBjYXNlIDc6XG4gICAgICAgIC8vIDB4eHh4eHh4XG4gICAgICAgIG91dCArPSBzdHIuY2hhckF0KGkgLSAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEyOlxuICAgICAgY2FzZSAxMzpcbiAgICAgICAgLy8gMTEweCB4eHh4IDEweHggeHh4eFxuICAgICAgICBjaGFyMiA9IHN0ci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MUYpIDw8IDYpIHwgKGNoYXIyICYgMHgzRikpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTQ6XG4gICAgICAgIC8vIDExMTAgeHh4eCAxMHh4IHh4eHggMTB4eCB4eHh4XG4gICAgICAgIGNoYXIyID0gc3RyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgY2hhcjMgPSBzdHIuY2hhckNvZGVBdChpKyspO1xuICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAweDBGKSA8PCAxMikgfCAoKGNoYXIyICYgMHgzRikgPDwgNikgfCAoKGNoYXIzICYgMHgzRikgPDwgMCkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuLypcbiAqIEludGVyZmFjZXM6XG4gKiBiNjQgPSBiYXNlNjRlbmNvZGUoZGF0YSk7XG4gKiBkYXRhID0gYmFzZTY0ZGVjb2RlKGI2NCk7XG4gKi9cbnZhciBiYXNlNjRFbmNvZGVDaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktX1wiO1xudmFyIGJhc2U2NERlY29kZUNoYXJzID0gbmV3IEFycmF5KC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCA2MiwgLTEsIC0xLCAtMSwgNjMsXG4gIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDU4LCA1OSwgNjAsIDYxLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LFxuICAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsXG4gIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgLTEsIC0xLCAtMSwgLTEsIC0xKTtcblxuZnVuY3Rpb24gYmFzZTY0ZW5jb2RlKHN0cikge1xuICB2YXIgb3V0LCBpLCBsZW47XG4gIHZhciBjMSwgYzIsIGMzO1xuICBsZW4gPSBzdHIubGVuZ3RoO1xuICBpID0gMDtcbiAgb3V0ID0gXCJcIjtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBjMSA9IHN0ci5jaGFyQ29kZUF0KGkrKykgJiAweGZmO1xuICAgIGlmIChpID09IGxlbikge1xuICAgICAgb3V0ICs9IGJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdChjMSA+PiAyKTtcbiAgICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKGMxICYgMHgzKSA8PCA0KTtcbiAgICAgIG91dCArPSBcIj09XCI7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYzIgPSBzdHIuY2hhckNvZGVBdChpKyspO1xuICAgIGlmIChpID09IGxlbikge1xuICAgICAgb3V0ICs9IGJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdChjMSA+PiAyKTtcbiAgICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKChjMSAmIDB4MykgPDwgNCkgfCAoKGMyICYgMHhGMCkgPj4gNCkpO1xuICAgICAgb3V0ICs9IGJhc2U2NEVuY29kZUNoYXJzLmNoYXJBdCgoYzIgJiAweEYpIDw8IDIpO1xuICAgICAgb3V0ICs9IFwiPVwiO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGMzID0gc3RyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICBvdXQgKz0gYmFzZTY0RW5jb2RlQ2hhcnMuY2hhckF0KGMxID4+IDIpO1xuICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKChjMSAmIDB4MykgPDwgNCkgfCAoKGMyICYgMHhGMCkgPj4gNCkpO1xuICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoKChjMiAmIDB4RikgPDwgMikgfCAoKGMzICYgMHhDMCkgPj4gNikpO1xuICAgIG91dCArPSBiYXNlNjRFbmNvZGVDaGFycy5jaGFyQXQoYzMgJiAweDNGKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBiYXNlNjRkZWNvZGUoc3RyKSB7XG4gIHZhciBjMSwgYzIsIGMzLCBjNDtcbiAgdmFyIGksIGxlbiwgb3V0O1xuICBsZW4gPSBzdHIubGVuZ3RoO1xuICBpID0gMDtcbiAgb3V0ID0gXCJcIjtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAvKiBjMSAqL1xuICAgIGRvIHtcbiAgICAgIGMxID0gYmFzZTY0RGVjb2RlQ2hhcnNbc3RyLmNoYXJDb2RlQXQoaSsrKSAmIDB4ZmZdO1xuICAgIH0gd2hpbGUgKGkgPCBsZW4gJiYgYzEgPT0gLTEpO1xuICAgIGlmIChjMSA9PSAtMSkgYnJlYWs7XG4gICAgLyogYzIgKi9cbiAgICBkbyB7XG4gICAgICBjMiA9IGJhc2U2NERlY29kZUNoYXJzW3N0ci5jaGFyQ29kZUF0KGkrKykgJiAweGZmXTtcbiAgICB9IHdoaWxlIChpIDwgbGVuICYmIGMyID09IC0xKTtcbiAgICBpZiAoYzIgPT0gLTEpIGJyZWFrO1xuICAgIG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjMSA8PCAyKSB8ICgoYzIgJiAweDMwKSA+PiA0KSk7XG4gICAgLyogYzMgKi9cbiAgICBkbyB7XG4gICAgICBjMyA9IHN0ci5jaGFyQ29kZUF0KGkrKykgJiAweGZmO1xuICAgICAgaWYgKGMzID09IDYxKSByZXR1cm4gb3V0O1xuICAgICAgYzMgPSBiYXNlNjREZWNvZGVDaGFyc1tjM107XG4gICAgfSB3aGlsZSAoaSA8IGxlbiAmJiBjMyA9PSAtMSk7XG4gICAgaWYgKGMzID09IC0xKSBicmVhaztcbiAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMyICYgMFhGKSA8PCA0KSB8ICgoYzMgJiAweDNDKSA+PiAyKSk7XG4gICAgLyogYzQgKi9cbiAgICBkbyB7XG4gICAgICBjNCA9IHN0ci5jaGFyQ29kZUF0KGkrKykgJiAweGZmO1xuICAgICAgaWYgKGM0ID09IDYxKSByZXR1cm4gb3V0O1xuICAgICAgYzQgPSBiYXNlNjREZWNvZGVDaGFyc1tjNF07XG4gICAgfSB3aGlsZSAoaSA8IGxlbiAmJiBjNCA9PSAtMSk7XG4gICAgaWYgKGM0ID09IC0xKSBicmVhaztcbiAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMzICYgMHgwMykgPDwgNikgfCBjNCk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbnZhciBzYWZlNjQgPSBmdW5jdGlvbiAoYmFzZTY0KSB7XG4gIGJhc2U2NCA9IGJhc2U2NC5yZXBsYWNlKC9cXCsvZywgXCItXCIpO1xuICBiYXNlNjQgPSBiYXNlNjQucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcbiAgcmV0dXJuIGJhc2U2NDtcbn07XG5cbmZ1bmN0aW9uIGdlblRva2VuKGFjY2Vzc0tleSwgc2VjcmV0S2V5LCBwdXRQb2xpY3kpIHtcblxuICB2YXIgcHV0X3BvbGljeSA9IEpTT04uc3RyaW5naWZ5KHB1dFBvbGljeSk7XG4gIGNvbnNvbGUubG9nKFwicHV0X3BvbGljeSA9IFwiLCBwdXRfcG9saWN5KTtcblxuXG4gIC8vU0VUUCAzXG4gIHZhciBlbmNvZGVkID0gYmFzZTY0ZW5jb2RlKHV0ZjE2dG84KHB1dF9wb2xpY3kpKTtcbiAgY29uc29sZS5sb2coXCJlbmNvZGVkID0gXCIsIGVuY29kZWQpO1xuXG4gIC8vU0VUUCA0XG4gIHZhciBoYXNoID0gQ3J5cHRvSlMuSG1hY1NIQTEoZW5jb2RlZCwgc2VjcmV0S2V5KTtcbiAgdmFyIGVuY29kZWRfc2lnbmVkID0gaGFzaC50b1N0cmluZyhDcnlwdG9KUy5lbmMuQmFzZTY0KTtcblxuICAvL1NFVFAgNVxuICB2YXIgdXBsb2FkX3Rva2VuID0gYWNjZXNzS2V5ICsgXCI6XCIgKyBzYWZlNjQoZW5jb2RlZF9zaWduZWQpICsgXCI6XCIgKyBlbmNvZGVkO1xuXG4gIHJldHVybiB1cGxvYWRfdG9rZW47XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZW5Ub2tlbjogZ2VuVG9rZW5cbn0iXX0=