"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.AV = t() : e.AV = t();
}(undefined, function () {
  return function (e) {
    function t(r) {
      if (n[r]) return n[r].exports;var i = n[r] = { i: r, l: !1, exports: {} };return e[r].call(i.exports, i, i.exports, t), i.l = !0, i.exports;
    }var n = {};return t.m = e, t.c = n, t.i = function (e) {
      return e;
    }, t.d = function (e, n, r) {
      t.o(e, n) || Object.defineProperty(e, n, { configurable: !1, enumerable: !0, get: r });
    }, t.n = function (e) {
      var n = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };return t.d(n, "a", n), n;
    }, t.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, t.p = "", t(t.s = 45);
  }([function (e, t, n) {
    var r, i;(function () {
      function n(e) {
        function t(t, n, r, i, o, s) {
          for (; o >= 0 && o < s; o += e) {
            var a = i ? i[o] : o;r = n(r, t[a], a, t);
          }return r;
        }return function (n, r, i, o) {
          r = S(r, o, 4);var s = !x(n) && O.keys(n),
              a = (s || n).length,
              u = e > 0 ? 0 : a - 1;return arguments.length < 3 && (i = n[s ? s[u] : u], u += e), t(n, r, i, s, u, a);
        };
      }function o(e) {
        return function (t, n, r) {
          n = E(n, r);for (var i = N(t), o = e > 0 ? 0 : i - 1; o >= 0 && o < i; o += e) {
            if (n(t[o], o, t)) return o;
          }return -1;
        };
      }function s(e, t, n) {
        return function (r, i, o) {
          var s = 0,
              a = N(r);if ("number" == typeof o) e > 0 ? s = o >= 0 ? o : Math.max(o + a, s) : a = o >= 0 ? Math.min(o + 1, a) : o + a + 1;else if (n && o && a) return o = n(r, i), r[o] === i ? o : -1;if (i !== i) return o = t(p.call(r, s, a), O.isNaN), o >= 0 ? o + s : -1;for (o = e > 0 ? s : a - 1; o >= 0 && o < a; o += e) {
            if (r[o] === i) return o;
          }return -1;
        };
      }function a(e, t) {
        var n = R.length,
            r = e.constructor,
            i = O.isFunction(r) && r.prototype || h,
            o = "constructor";for (O.has(e, o) && !O.contains(t, o) && t.push(o); n--;) {
          (o = R[n]) in e && e[o] !== i[o] && !O.contains(t, o) && t.push(o);
        }
      }var u = this,
          c = u._,
          l = Array.prototype,
          h = Object.prototype,
          f = Function.prototype,
          d = l.push,
          p = l.slice,
          _ = h.toString,
          v = h.hasOwnProperty,
          y = Array.isArray,
          m = Object.keys,
          g = f.bind,
          b = Object.create,
          w = function w() {},
          O = function O(e) {
        return e instanceof O ? e : this instanceof O ? void (this._wrapped = e) : new O(e);
      };void 0 !== e && e.exports && (t = e.exports = O), t._ = O, O.VERSION = "1.8.3";var S = function S(e, t, n) {
        if (void 0 === t) return e;switch (null == n ? 3 : n) {case 1:
            return function (n) {
              return e.call(t, n);
            };case 2:
            return function (n, r) {
              return e.call(t, n, r);
            };case 3:
            return function (n, r, i) {
              return e.call(t, n, r, i);
            };case 4:
            return function (n, r, i, o) {
              return e.call(t, n, r, i, o);
            };}return function () {
          return e.apply(t, arguments);
        };
      },
          E = function E(e, t, n) {
        return null == e ? O.identity : O.isFunction(e) ? S(e, t, n) : O.isObject(e) ? O.matcher(e) : O.property(e);
      };O.iteratee = function (e, t) {
        return E(e, t, 1 / 0);
      };var A = function A(e, t) {
        return function (n) {
          var r = arguments.length;if (r < 2 || null == n) return n;for (var i = 1; i < r; i++) {
            for (var o = arguments[i], s = e(o), a = s.length, u = 0; u < a; u++) {
              var c = s[u];t && void 0 !== n[c] || (n[c] = o[c]);
            }
          }return n;
        };
      },
          C = function C(e) {
        if (!O.isObject(e)) return {};if (b) return b(e);w.prototype = e;var t = new w();return w.prototype = null, t;
      },
          T = function T(e) {
        return function (t) {
          return null == t ? void 0 : t[e];
        };
      },
          j = Math.pow(2, 53) - 1,
          N = T("length"),
          x = function x(e) {
        var t = N(e);return "number" == typeof t && t >= 0 && t <= j;
      };O.each = O.forEach = function (e, t, n) {
        t = S(t, n);var r, i;if (x(e)) for (r = 0, i = e.length; r < i; r++) {
          t(e[r], r, e);
        } else {
          var o = O.keys(e);for (r = 0, i = o.length; r < i; r++) {
            t(e[o[r]], o[r], e);
          }
        }return e;
      }, O.map = O.collect = function (e, t, n) {
        t = E(t, n);for (var r = !x(e) && O.keys(e), i = (r || e).length, o = Array(i), s = 0; s < i; s++) {
          var a = r ? r[s] : s;o[s] = t(e[a], a, e);
        }return o;
      }, O.reduce = O.foldl = O.inject = n(1), O.reduceRight = O.foldr = n(-1), O.find = O.detect = function (e, t, n) {
        var r;if (void 0 !== (r = x(e) ? O.findIndex(e, t, n) : O.findKey(e, t, n)) && -1 !== r) return e[r];
      }, O.filter = O.select = function (e, t, n) {
        var r = [];return t = E(t, n), O.each(e, function (e, n, i) {
          t(e, n, i) && r.push(e);
        }), r;
      }, O.reject = function (e, t, n) {
        return O.filter(e, O.negate(E(t)), n);
      }, O.every = O.all = function (e, t, n) {
        t = E(t, n);for (var r = !x(e) && O.keys(e), i = (r || e).length, o = 0; o < i; o++) {
          var s = r ? r[o] : o;if (!t(e[s], s, e)) return !1;
        }return !0;
      }, O.some = O.any = function (e, t, n) {
        t = E(t, n);for (var r = !x(e) && O.keys(e), i = (r || e).length, o = 0; o < i; o++) {
          var s = r ? r[o] : o;if (t(e[s], s, e)) return !0;
        }return !1;
      }, O.contains = O.includes = O.include = function (e, t, n, r) {
        return x(e) || (e = O.values(e)), ("number" != typeof n || r) && (n = 0), O.indexOf(e, t, n) >= 0;
      }, O.invoke = function (e, t) {
        var n = p.call(arguments, 2),
            r = O.isFunction(t);return O.map(e, function (e) {
          var i = r ? t : e[t];return null == i ? i : i.apply(e, n);
        });
      }, O.pluck = function (e, t) {
        return O.map(e, O.property(t));
      }, O.where = function (e, t) {
        return O.filter(e, O.matcher(t));
      }, O.findWhere = function (e, t) {
        return O.find(e, O.matcher(t));
      }, O.max = function (e, t, n) {
        var r,
            i,
            o = -1 / 0,
            s = -1 / 0;if (null == t && null != e) {
          e = x(e) ? e : O.values(e);for (var a = 0, u = e.length; a < u; a++) {
            (r = e[a]) > o && (o = r);
          }
        } else t = E(t, n), O.each(e, function (e, n, r) {
          ((i = t(e, n, r)) > s || i === -1 / 0 && o === -1 / 0) && (o = e, s = i);
        });return o;
      }, O.min = function (e, t, n) {
        var r,
            i,
            o = 1 / 0,
            s = 1 / 0;if (null == t && null != e) {
          e = x(e) ? e : O.values(e);for (var a = 0, u = e.length; a < u; a++) {
            (r = e[a]) < o && (o = r);
          }
        } else t = E(t, n), O.each(e, function (e, n, r) {
          ((i = t(e, n, r)) < s || i === 1 / 0 && o === 1 / 0) && (o = e, s = i);
        });return o;
      }, O.shuffle = function (e) {
        for (var t, n = x(e) ? e : O.values(e), r = n.length, i = Array(r), o = 0; o < r; o++) {
          t = O.random(0, o), t !== o && (i[o] = i[t]), i[t] = n[o];
        }return i;
      }, O.sample = function (e, t, n) {
        return null == t || n ? (x(e) || (e = O.values(e)), e[O.random(e.length - 1)]) : O.shuffle(e).slice(0, Math.max(0, t));
      }, O.sortBy = function (e, t, n) {
        return t = E(t, n), O.pluck(O.map(e, function (e, n, r) {
          return { value: e, index: n, criteria: t(e, n, r) };
        }).sort(function (e, t) {
          var n = e.criteria,
              r = t.criteria;if (n !== r) {
            if (n > r || void 0 === n) return 1;if (n < r || void 0 === r) return -1;
          }return e.index - t.index;
        }), "value");
      };var k = function k(e) {
        return function (t, n, r) {
          var i = {};return n = E(n, r), O.each(t, function (r, o) {
            var s = n(r, o, t);e(i, r, s);
          }), i;
        };
      };O.groupBy = k(function (e, t, n) {
        O.has(e, n) ? e[n].push(t) : e[n] = [t];
      }), O.indexBy = k(function (e, t, n) {
        e[n] = t;
      }), O.countBy = k(function (e, t, n) {
        O.has(e, n) ? e[n]++ : e[n] = 1;
      }), O.toArray = function (e) {
        return e ? O.isArray(e) ? p.call(e) : x(e) ? O.map(e, O.identity) : O.values(e) : [];
      }, O.size = function (e) {
        return null == e ? 0 : x(e) ? e.length : O.keys(e).length;
      }, O.partition = function (e, t, n) {
        t = E(t, n);var r = [],
            i = [];return O.each(e, function (e, n, o) {
          (t(e, n, o) ? r : i).push(e);
        }), [r, i];
      }, O.first = O.head = O.take = function (e, t, n) {
        if (null != e) return null == t || n ? e[0] : O.initial(e, e.length - t);
      }, O.initial = function (e, t, n) {
        return p.call(e, 0, Math.max(0, e.length - (null == t || n ? 1 : t)));
      }, O.last = function (e, t, n) {
        if (null != e) return null == t || n ? e[e.length - 1] : O.rest(e, Math.max(0, e.length - t));
      }, O.rest = O.tail = O.drop = function (e, t, n) {
        return p.call(e, null == t || n ? 1 : t);
      }, O.compact = function (e) {
        return O.filter(e, O.identity);
      };var U = function U(e, t, n, r) {
        for (var i = [], o = 0, s = r || 0, a = N(e); s < a; s++) {
          var u = e[s];if (x(u) && (O.isArray(u) || O.isArguments(u))) {
            t || (u = U(u, t, n));var c = 0,
                l = u.length;for (i.length += l; c < l;) {
              i[o++] = u[c++];
            }
          } else n || (i[o++] = u);
        }return i;
      };O.flatten = function (e, t) {
        return U(e, t, !1);
      }, O.without = function (e) {
        return O.difference(e, p.call(arguments, 1));
      }, O.uniq = O.unique = function (e, t, n, r) {
        O.isBoolean(t) || (r = n, n = t, t = !1), null != n && (n = E(n, r));for (var i = [], o = [], s = 0, a = N(e); s < a; s++) {
          var u = e[s],
              c = n ? n(u, s, e) : u;t ? (s && o === c || i.push(u), o = c) : n ? O.contains(o, c) || (o.push(c), i.push(u)) : O.contains(i, u) || i.push(u);
        }return i;
      }, O.union = function () {
        return O.uniq(U(arguments, !0, !0));
      }, O.intersection = function (e) {
        for (var t = [], n = arguments.length, r = 0, i = N(e); r < i; r++) {
          var o = e[r];if (!O.contains(t, o)) {
            for (var s = 1; s < n && O.contains(arguments[s], o); s++) {}s === n && t.push(o);
          }
        }return t;
      }, O.difference = function (e) {
        var t = U(arguments, !0, !0, 1);return O.filter(e, function (e) {
          return !O.contains(t, e);
        });
      }, O.zip = function () {
        return O.unzip(arguments);
      }, O.unzip = function (e) {
        for (var t = e && O.max(e, N).length || 0, n = Array(t), r = 0; r < t; r++) {
          n[r] = O.pluck(e, r);
        }return n;
      }, O.object = function (e, t) {
        for (var n = {}, r = 0, i = N(e); r < i; r++) {
          t ? n[e[r]] = t[r] : n[e[r][0]] = e[r][1];
        }return n;
      }, O.findIndex = o(1), O.findLastIndex = o(-1), O.sortedIndex = function (e, t, n, r) {
        n = E(n, r, 1);for (var i = n(t), o = 0, s = N(e); o < s;) {
          var a = Math.floor((o + s) / 2);n(e[a]) < i ? o = a + 1 : s = a;
        }return o;
      }, O.indexOf = s(1, O.findIndex, O.sortedIndex), O.lastIndexOf = s(-1, O.findLastIndex), O.range = function (e, t, n) {
        null == t && (t = e || 0, e = 0), n = n || 1;for (var r = Math.max(Math.ceil((t - e) / n), 0), i = Array(r), o = 0; o < r; o++, e += n) {
          i[o] = e;
        }return i;
      };var I = function I(e, t, n, r, i) {
        if (!(r instanceof t)) return e.apply(n, i);var o = C(e.prototype),
            s = e.apply(o, i);return O.isObject(s) ? s : o;
      };O.bind = function (e, t) {
        if (g && e.bind === g) return g.apply(e, p.call(arguments, 1));if (!O.isFunction(e)) throw new TypeError("Bind must be called on a function");var n = p.call(arguments, 2),
            r = function r() {
          return I(e, r, t, this, n.concat(p.call(arguments)));
        };return r;
      }, O.partial = function (e) {
        var t = p.call(arguments, 1),
            n = function n() {
          for (var r = 0, i = t.length, o = Array(i), s = 0; s < i; s++) {
            o[s] = t[s] === O ? arguments[r++] : t[s];
          }for (; r < arguments.length;) {
            o.push(arguments[r++]);
          }return I(e, n, this, this, o);
        };return n;
      }, O.bindAll = function (e) {
        var t,
            n,
            r = arguments.length;if (r <= 1) throw new Error("bindAll must be passed function names");for (t = 1; t < r; t++) {
          n = arguments[t], e[n] = O.bind(e[n], e);
        }return e;
      }, O.memoize = function (e, t) {
        var n = function n(r) {
          var i = n.cache,
              o = "" + (t ? t.apply(this, arguments) : r);return O.has(i, o) || (i[o] = e.apply(this, arguments)), i[o];
        };return n.cache = {}, n;
      }, O.delay = function (e, t) {
        var n = p.call(arguments, 2);return setTimeout(function () {
          return e.apply(null, n);
        }, t);
      }, O.defer = O.partial(O.delay, O, 1), O.throttle = function (e, t, n) {
        var r,
            i,
            o,
            s = null,
            a = 0;n || (n = {});var u = function u() {
          a = !1 === n.leading ? 0 : O.now(), s = null, o = e.apply(r, i), s || (r = i = null);
        };return function () {
          var c = O.now();a || !1 !== n.leading || (a = c);var l = t - (c - a);return r = this, i = arguments, l <= 0 || l > t ? (s && (clearTimeout(s), s = null), a = c, o = e.apply(r, i), s || (r = i = null)) : s || !1 === n.trailing || (s = setTimeout(u, l)), o;
        };
      }, O.debounce = function (e, t, n) {
        var r,
            i,
            o,
            s,
            a,
            u = function u() {
          var c = O.now() - s;c < t && c >= 0 ? r = setTimeout(u, t - c) : (r = null, n || (a = e.apply(o, i), r || (o = i = null)));
        };return function () {
          o = this, i = arguments, s = O.now();var c = n && !r;return r || (r = setTimeout(u, t)), c && (a = e.apply(o, i), o = i = null), a;
        };
      }, O.wrap = function (e, t) {
        return O.partial(t, e);
      }, O.negate = function (e) {
        return function () {
          return !e.apply(this, arguments);
        };
      }, O.compose = function () {
        var e = arguments,
            t = e.length - 1;return function () {
          for (var n = t, r = e[t].apply(this, arguments); n--;) {
            r = e[n].call(this, r);
          }return r;
        };
      }, O.after = function (e, t) {
        return function () {
          if (--e < 1) return t.apply(this, arguments);
        };
      }, O.before = function (e, t) {
        var n;return function () {
          return --e > 0 && (n = t.apply(this, arguments)), e <= 1 && (t = null), n;
        };
      }, O.once = O.partial(O.before, 2);var P = !{ toString: null }.propertyIsEnumerable("toString"),
          R = ["valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];O.keys = function (e) {
        if (!O.isObject(e)) return [];if (m) return m(e);var t = [];for (var n in e) {
          O.has(e, n) && t.push(n);
        }return P && a(e, t), t;
      }, O.allKeys = function (e) {
        if (!O.isObject(e)) return [];var t = [];for (var n in e) {
          t.push(n);
        }return P && a(e, t), t;
      }, O.values = function (e) {
        for (var t = O.keys(e), n = t.length, r = Array(n), i = 0; i < n; i++) {
          r[i] = e[t[i]];
        }return r;
      }, O.mapObject = function (e, t, n) {
        t = E(t, n);for (var r, i = O.keys(e), o = i.length, s = {}, a = 0; a < o; a++) {
          r = i[a], s[r] = t(e[r], r, e);
        }return s;
      }, O.pairs = function (e) {
        for (var t = O.keys(e), n = t.length, r = Array(n), i = 0; i < n; i++) {
          r[i] = [t[i], e[t[i]]];
        }return r;
      }, O.invert = function (e) {
        for (var t = {}, n = O.keys(e), r = 0, i = n.length; r < i; r++) {
          t[e[n[r]]] = n[r];
        }return t;
      }, O.functions = O.methods = function (e) {
        var t = [];for (var n in e) {
          O.isFunction(e[n]) && t.push(n);
        }return t.sort();
      }, O.extend = A(O.allKeys), O.extendOwn = O.assign = A(O.keys), O.findKey = function (e, t, n) {
        t = E(t, n);for (var r, i = O.keys(e), o = 0, s = i.length; o < s; o++) {
          if (r = i[o], t(e[r], r, e)) return r;
        }
      }, O.pick = function (e, t, n) {
        var r,
            i,
            o = {},
            s = e;if (null == s) return o;O.isFunction(t) ? (i = O.allKeys(s), r = S(t, n)) : (i = U(arguments, !1, !1, 1), r = function r(e, t, n) {
          return t in n;
        }, s = Object(s));for (var a = 0, u = i.length; a < u; a++) {
          var c = i[a],
              l = s[c];r(l, c, s) && (o[c] = l);
        }return o;
      }, O.omit = function (e, t, n) {
        if (O.isFunction(t)) t = O.negate(t);else {
          var r = O.map(U(arguments, !1, !1, 1), String);t = function t(e, _t) {
            return !O.contains(r, _t);
          };
        }return O.pick(e, t, n);
      }, O.defaults = A(O.allKeys, !0), O.create = function (e, t) {
        var n = C(e);return t && O.extendOwn(n, t), n;
      }, O.clone = function (e) {
        return O.isObject(e) ? O.isArray(e) ? e.slice() : O.extend({}, e) : e;
      }, O.tap = function (e, t) {
        return t(e), e;
      }, O.isMatch = function (e, t) {
        var n = O.keys(t),
            r = n.length;if (null == e) return !r;for (var i = Object(e), o = 0; o < r; o++) {
          var s = n[o];if (t[s] !== i[s] || !(s in i)) return !1;
        }return !0;
      };var D = function D(e, t, n, r) {
        if (e === t) return 0 !== e || 1 / e == 1 / t;if (null == e || null == t) return e === t;e instanceof O && (e = e._wrapped), t instanceof O && (t = t._wrapped);var i = _.call(e);if (i !== _.call(t)) return !1;switch (i) {case "[object RegExp]":case "[object String]":
            return "" + e == "" + t;case "[object Number]":
            return +e != +e ? +t != +t : 0 == +e ? 1 / +e == 1 / t : +e == +t;case "[object Date]":case "[object Boolean]":
            return +e == +t;}var o = "[object Array]" === i;if (!o) {
          if ("object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t))) return !1;var s = e.constructor,
              a = t.constructor;if (s !== a && !(O.isFunction(s) && s instanceof s && O.isFunction(a) && a instanceof a) && "constructor" in e && "constructor" in t) return !1;
        }n = n || [], r = r || [];for (var u = n.length; u--;) {
          if (n[u] === e) return r[u] === t;
        }if (n.push(e), r.push(t), o) {
          if ((u = e.length) !== t.length) return !1;for (; u--;) {
            if (!D(e[u], t[u], n, r)) return !1;
          }
        } else {
          var c,
              l = O.keys(e);if (u = l.length, O.keys(t).length !== u) return !1;for (; u--;) {
            if (c = l[u], !O.has(t, c) || !D(e[c], t[c], n, r)) return !1;
          }
        }return n.pop(), r.pop(), !0;
      };O.isEqual = function (e, t) {
        return D(e, t);
      }, O.isEmpty = function (e) {
        return null == e || (x(e) && (O.isArray(e) || O.isString(e) || O.isArguments(e)) ? 0 === e.length : 0 === O.keys(e).length);
      }, O.isElement = function (e) {
        return !(!e || 1 !== e.nodeType);
      }, O.isArray = y || function (e) {
        return "[object Array]" === _.call(e);
      }, O.isObject = function (e) {
        var t = typeof e === "undefined" ? "undefined" : _typeof(e);return "function" === t || "object" === t && !!e;
      }, O.each(["Arguments", "Function", "String", "Number", "Date", "RegExp", "Error"], function (e) {
        O["is" + e] = function (t) {
          return _.call(t) === "[object " + e + "]";
        };
      }), O.isArguments(arguments) || (O.isArguments = function (e) {
        return O.has(e, "callee");
      }), "function" != typeof /./ && "object" != (typeof Int8Array === "undefined" ? "undefined" : _typeof(Int8Array)) && (O.isFunction = function (e) {
        return "function" == typeof e || !1;
      }), O.isFinite = function (e) {
        return isFinite(e) && !isNaN(parseFloat(e));
      }, O.isNaN = function (e) {
        return O.isNumber(e) && e !== +e;
      }, O.isBoolean = function (e) {
        return !0 === e || !1 === e || "[object Boolean]" === _.call(e);
      }, O.isNull = function (e) {
        return null === e;
      }, O.isUndefined = function (e) {
        return void 0 === e;
      }, O.has = function (e, t) {
        return null != e && v.call(e, t);
      }, O.noConflict = function () {
        return u._ = c, this;
      }, O.identity = function (e) {
        return e;
      }, O.constant = function (e) {
        return function () {
          return e;
        };
      }, O.noop = function () {}, O.property = T, O.propertyOf = function (e) {
        return null == e ? function () {} : function (t) {
          return e[t];
        };
      }, O.matcher = O.matches = function (e) {
        return e = O.extendOwn({}, e), function (t) {
          return O.isMatch(t, e);
        };
      }, O.times = function (e, t, n) {
        var r = Array(Math.max(0, e));t = S(t, n, 1);for (var i = 0; i < e; i++) {
          r[i] = t(i);
        }return r;
      }, O.random = function (e, t) {
        return null == t && (t = e, e = 0), e + Math.floor(Math.random() * (t - e + 1));
      }, O.now = Date.now || function () {
        return new Date().getTime();
      };var F = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" },
          L = O.invert(F),
          q = function q(e) {
        var t = function t(_t2) {
          return e[_t2];
        },
            n = "(?:" + O.keys(e).join("|") + ")",
            r = RegExp(n),
            i = RegExp(n, "g");return function (e) {
          return e = null == e ? "" : "" + e, r.test(e) ? e.replace(i, t) : e;
        };
      };O.escape = q(F), O.unescape = q(L), O.result = function (e, t, n) {
        var r = null == e ? void 0 : e[t];return void 0 === r && (r = n), O.isFunction(r) ? r.call(e) : r;
      };var M = 0;O.uniqueId = function (e) {
        var t = ++M + "";return e ? e + t : t;
      }, O.templateSettings = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g };var B = /(.)^/,
          J = { "'": "'", "\\": "\\", "\r": "r", "\n": "n", "\u2028": "u2028", "\u2029": "u2029" },
          Q = /\\|'|\r|\n|\u2028|\u2029/g,
          W = function W(e) {
        return "\\" + J[e];
      };O.template = function (e, t, n) {
        !t && n && (t = n), t = O.defaults({}, t, O.templateSettings);var r = RegExp([(t.escape || B).source, (t.interpolate || B).source, (t.evaluate || B).source].join("|") + "|$", "g"),
            i = 0,
            o = "__p+='";e.replace(r, function (t, n, r, s, a) {
          return o += e.slice(i, a).replace(Q, W), i = a + t.length, n ? o += "'+\n((__t=(" + n + "))==null?'':_.escape(__t))+\n'" : r ? o += "'+\n((__t=(" + r + "))==null?'':__t)+\n'" : s && (o += "';\n" + s + "\n__p+='"), t;
        }), o += "';\n", t.variable || (o = "with(obj||{}){\n" + o + "}\n"), o = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + o + "return __p;\n";try {
          var s = new Function(t.variable || "obj", "_", o);
        } catch (e) {
          throw e.source = o, e;
        }var a = function a(e) {
          return s.call(this, e, O);
        };return a.source = "function(" + (t.variable || "obj") + "){\n" + o + "}", a;
      }, O.chain = function (e) {
        var t = O(e);return t._chain = !0, t;
      };var V = function V(e, t) {
        return e._chain ? O(t).chain() : t;
      };O.mixin = function (e) {
        O.each(O.functions(e), function (t) {
          var n = O[t] = e[t];O.prototype[t] = function () {
            var e = [this._wrapped];return d.apply(e, arguments), V(this, n.apply(O, e));
          };
        });
      }, O.mixin(O), O.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (e) {
        var t = l[e];O.prototype[e] = function () {
          var n = this._wrapped;return t.apply(n, arguments), "shift" !== e && "splice" !== e || 0 !== n.length || delete n[0], V(this, n);
        };
      }), O.each(["concat", "join", "slice"], function (e) {
        var t = l[e];O.prototype[e] = function () {
          return V(this, t.apply(this._wrapped, arguments));
        };
      }), O.prototype.value = function () {
        return this._wrapped;
      }, O.prototype.valueOf = O.prototype.toJSON = O.prototype.value, O.prototype.toString = function () {
        return "" + this._wrapped;
      }, r = [], void 0 !== (i = function () {
        return O;
      }.apply(t, r)) && (e.exports = i);
    }).call(this);
  }, function (e, t, n) {
    "use strict";
    var r = (n(0), n(56).Promise);r._continueWhile = function (e, t) {
      return e() ? t().then(function () {
        return r._continueWhile(e, t);
      }) : r.resolve();
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(62),
        o = n(0),
        s = o.extend,
        a = n(1),
        u = n(5),
        c = n(3),
        l = c.getSessionToken,
        h = c.ajax,
        f = function f(e, t) {
      var n = new Date().getTime(),
          r = i(n + e);return t ? r + "," + n + ",master" : r + "," + n;
    },
        d = function d(e, t) {
      t ? e["X-LC-Sign"] = f(u.applicationKey) : e["X-LC-Key"] = u.applicationKey;
    },
        p = function p() {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = arguments[1],
          n = { "X-LC-Id": u.applicationId, "Content-Type": "application/json;charset=UTF-8" },
          r = !1;return "boolean" == typeof e.useMasterKey ? r = e.useMasterKey : "boolean" == typeof u._config.useMasterKey && (r = u._config.useMasterKey), r ? u.masterKey ? t ? n["X-LC-Sign"] = f(u.masterKey, !0) : n["X-LC-Key"] = u.masterKey + ",master" : (console.warn("masterKey is not set, fall back to use appKey"), d(n, t)) : d(n, t), u.hookKey && (n["X-LC-Hook-Key"] = u.hookKey), null !== u._config.production && (n["X-LC-Prod"] = String(u._config.production)), n["X-LC-UA"] = u._sharedConfig.userAgent, a.resolve().then(function () {
        var t = l(e);if (t) n["X-LC-Session"] = t;else if (!u._config.disableCurrentUser) return u.User.currentAsync().then(function (e) {
          return e && e._sessionToken && (n["X-LC-Session"] = e._sessionToken), n;
        });return n;
      });
    },
        _ = function _(e) {
      var t = e.service,
          n = void 0 === t ? "api" : t,
          r = e.version,
          i = void 0 === r ? "1.1" : r,
          o = e.path,
          s = u._config.serverURLs[n];if (!s) throw new Error("undefined server URL for " + n);return "/" !== s.charAt(s.length - 1) && (s += "/"), s += i, o && (s += o), s;
    },
        v = function v(e) {
      var t = e.service,
          n = e.version,
          i = e.method,
          o = e.path,
          s = e.query,
          a = e.data,
          c = void 0 === a ? {} : a,
          l = e.authOptions,
          f = e.signKey,
          d = void 0 === f || f;if (!u.applicationId || !u.applicationKey && !u.masterKey) throw new Error("Not initialized");u._appRouter.refresh();var v = _({ service: t, path: o, version: n });return p(l, d).then(function (e) {
        return h({ method: i, url: v, query: s, data: c, headers: e }).catch(function (e) {
          var t = { code: e.code || -1, error: e.message || e.responseText };if (e.response && e.response.code) t = e.response;else if (e.responseText) try {
            t = JSON.parse(e.responseText);
          } catch (e) {}t.rawMessage = t.rawMessage || t.error, u._sharedConfig.keepErrorRawMessage || (t.error += " [" + (e.statusCode || "N/A") + " " + i + " " + v + "]");var n = new Error(t.error);throw delete t.error, r.extend(n, t);
        });
      });
    },
        y = function y(e, t, n, r) {
      var i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {},
          o = arguments[5],
          a = arguments[6],
          u = "";if (e && (u += "/" + e), t && (u += "/" + t), n && (u += "/" + n), i && i._fetchWhenSave) throw new Error("_fetchWhenSave should be in the query");if (i && i._where) throw new Error("_where should be in the query");return r && "get" === r.toLowerCase() && (a = s({}, a, i), i = null), v({ method: r, path: u, query: a, data: i, authOptions: o });
    };u.request = v, e.exports = { _request: y, request: v };
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      var t = new RegExp("^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})T([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})(.([0-9]+))?Z$"),
          n = t.exec(e);if (!n) return null;var r = n[1] || 0,
          i = (n[2] || 1) - 1,
          o = n[3] || 0,
          s = n[4] || 0,
          a = n[5] || 0,
          u = n[6] || 0,
          c = n[8] || 0;return new Date(Date.UTC(r, i, o, s, a, u, c));
    }var i = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        o = n(0),
        s = n(7),
        a = n(6),
        u = a("leancloud:request"),
        c = a("leancloud:request:error"),
        l = n(1),
        h = 0,
        f = function f(e) {
      var t = e.method,
          n = e.url,
          r = e.query,
          o = e.data,
          f = e.headers,
          d = void 0 === f ? {} : f,
          p = e.onprogress,
          _ = h++;u("request(" + _ + ")", t, n, r, o, d);var v = {};if (r) for (var y in r) {
        "object" === i(r[y]) ? v[y] = JSON.stringify(r[y]) : v[y] = r[y];
      }return new l(function (e, i) {
        var l = s(t, n).set(d).query(v).send(o);p && l.on("progress", p), l.end(function (s, l) {
          return s ? (l && (a.enabled("leancloud:request") || c("request(" + _ + ")", t, n, r, o, d), c("response(" + _ + ")", l.status, l.body || l.text, l.header), s.statusCode = l.status, s.responseText = l.text, s.response = l.body), i(s)) : (u("response(" + _ + ")", l.status, l.body || l.text, l.header), e(l.body));
        });
      });
    },
        d = function d(e) {
      return o.isNull(e) || o.isUndefined(e);
    },
        p = function p(e) {
      return o.isArray(e) ? e : void 0 === e || null === e ? [] : [e];
    },
        _ = function _() {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = e.keys,
          n = e.include,
          r = e.includeACL,
          i = {};return t && (i.keys = p(t).join(",")), n && (i.include = p(n).join(",")), r && (i.returnACL = r), i;
    },
        v = function v(e) {
      return e.sessionToken ? e.sessionToken : e.user && "function" == typeof e.user.getSessionToken ? e.user.getSessionToken() : void 0;
    },
        y = function y(e) {
      return function (t) {
        return e(t), t;
      };
    },
        m = function m() {},
        g = function g(e, t, n) {
      var r;return r = t && t.hasOwnProperty("constructor") ? t.constructor : function () {
        e.apply(this, arguments);
      }, o.extend(r, e), m.prototype = e.prototype, r.prototype = new m(), t && o.extend(r.prototype, t), n && o.extend(r, n), r.prototype.constructor = r, r.__super__ = e.prototype, r;
    },
        b = function b(e, t, n) {
      var r = t.split("."),
          i = r.pop(),
          o = e;return r.forEach(function (e) {
        void 0 === o[e] && (o[e] = {}), o = o[e];
      }), o[i] = n, e;
    },
        w = function w(e, t) {
      for (var n = t.split("."), r = n.pop(), i = e, o = 0; o < n.length; o++) {
        if (void 0 === (i = i[n[o]])) return [void 0, void 0, r];
      }return [i[r], i, r];
    };e.exports = { ajax: f, isNullOrUndefined: d, ensureArray: p, transformFetchOptions: _, getSessionToken: v, tap: y, inherits: g, parseDate: r, setValue: b, findValue: w };
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      var n = new Error(t);return n.code = e, n;
    }n(0).extend(r, { OTHER_CAUSE: -1, INTERNAL_SERVER_ERROR: 1, CONNECTION_FAILED: 100, OBJECT_NOT_FOUND: 101, INVALID_QUERY: 102, INVALID_CLASS_NAME: 103, MISSING_OBJECT_ID: 104, INVALID_KEY_NAME: 105, INVALID_POINTER: 106, INVALID_JSON: 107, COMMAND_UNAVAILABLE: 108, NOT_INITIALIZED: 109, INCORRECT_TYPE: 111, INVALID_CHANNEL_NAME: 112, PUSH_MISCONFIGURED: 115, OBJECT_TOO_LARGE: 116, OPERATION_FORBIDDEN: 119, CACHE_MISS: 120, INVALID_NESTED_KEY: 121, INVALID_FILE_NAME: 122, INVALID_ACL: 123, TIMEOUT: 124, INVALID_EMAIL_ADDRESS: 125, MISSING_CONTENT_TYPE: 126, MISSING_CONTENT_LENGTH: 127, INVALID_CONTENT_LENGTH: 128, FILE_TOO_LARGE: 129, FILE_SAVE_ERROR: 130, FILE_DELETE_ERROR: 153, DUPLICATE_VALUE: 137, INVALID_ROLE_NAME: 139, EXCEEDED_QUOTA: 140, SCRIPT_FAILED: 141, VALIDATION_ERROR: 142, INVALID_IMAGE_DATA: 150, UNSAVED_FILE_ERROR: 151, INVALID_PUSH_TIME_ERROR: 152, USERNAME_MISSING: 200, PASSWORD_MISSING: 201, USERNAME_TAKEN: 202, EMAIL_TAKEN: 203, EMAIL_MISSING: 204, EMAIL_NOT_FOUND: 205, SESSION_MISSING: 206, MUST_CREATE_USER_THROUGH_SIGNUP: 207, ACCOUNT_ALREADY_LINKED: 208, LINKED_ID_MISSING: 250, INVALID_LINKED_SESSION: 251, UNSUPPORTED_SERVICE: 252, X_DOMAIN_REQUEST: 602 }), e.exports = r;
  }, function (e, t, n) {
    "use strict";
    (function (t) {
      var r = n(0),
          i = n(47),
          o = n(3),
          s = o.inherits,
          a = o.parseDate,
          u = t.AV || {};u._config = { serverURLs: {}, useMasterKey: !1, production: null, realtime: null }, u._sharedConfig = { userAgent: i, liveQueryRealtime: null }, u._getAVPath = function (e) {
        if (!u.applicationId) throw new Error("You need to call AV.initialize before using AV.");if (e || (e = ""), !r.isString(e)) throw new Error("Tried to get a localStorage path that wasn't a String.");return "/" === e[0] && (e = e.substring(1)), "AV/" + u.applicationId + "/" + e;
      };var c = function c() {
        return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
      },
          l = function l() {
        return "" + c() + c() + "-" + c() + "-" + c() + "-" + c() + "-" + c() + c() + c();
      };u._installationId = null, u._getInstallationId = function () {
        if (u._installationId) return u.Promise.resolve(u._installationId);var e = u._getAVPath("installationId");return u.localStorage.getItemAsync(e).then(function (t) {
          return u._installationId = t, u._installationId ? t : (u._installationId = t = l(), u.localStorage.setItemAsync(e, t).then(function () {
            return t;
          }));
        });
      }, u._subscriptionId = null, u._refreshSubscriptionId = function () {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : u._getAVPath("subscriptionId"),
            t = u._subscriptionId = l();return u.localStorage.setItemAsync(e, t).then(function () {
          return t;
        });
      }, u._getSubscriptionId = function () {
        if (u._subscriptionId) return u.Promise.resolve(u._subscriptionId);var e = u._getAVPath("subscriptionId");return u.localStorage.getItemAsync(e).then(function (t) {
          return u._subscriptionId = t, u._subscriptionId || (t = u._refreshSubscriptionId(e)), t;
        });
      }, u._parseDate = a, u._extend = function (e, t) {
        var n = s(this, e, t);return n.extend = this.extend, n;
      }, u._encode = function (e, t, n) {
        var i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];if (e instanceof u.Object) {
          if (n) throw new Error("AV.Objects not allowed here");return t && !r.include(t, e) && e._hasData ? e._toFullJSON(t.concat(e), i) : e._toPointer();
        }if (e instanceof u.ACL) return e.toJSON();if (r.isDate(e)) return i ? { __type: "Date", iso: e.toJSON() } : e.toJSON();if (e instanceof u.GeoPoint) return e.toJSON();if (r.isArray(e)) return r.map(e, function (e) {
          return u._encode(e, t, n, i);
        });if (r.isRegExp(e)) return e.source;if (e instanceof u.Relation) return e.toJSON();if (e instanceof u.Op) return e.toJSON();if (e instanceof u.File) {
          if (!e.url() && !e.id) throw new Error("Tried to save an object containing an unsaved file.");return e._toFullJSON(t, i);
        }return r.isObject(e) ? r.mapObject(e, function (e, r) {
          return u._encode(e, t, n, i);
        }) : e;
      }, u._decode = function (e, t) {
        if (!r.isObject(e) || r.isDate(e)) return e;if (r.isArray(e)) return r.map(e, function (e) {
          return u._decode(e);
        });if (e instanceof u.Object) return e;if (e instanceof u.File) return e;if (e instanceof u.Op) return e;if (e instanceof u.GeoPoint) return e;if (e instanceof u.ACL) return e;if ("ACL" === t) return new u.ACL(e);if (e.__op) return u.Op._decode(e);var n;if ("Pointer" === e.__type) {
          n = e.className;var i = u.Object._create(n);if (Object.keys(e).length > 3) {
            var o = r.clone(e);delete o.__type, delete o.className, i._finishFetch(o, !0);
          } else i._finishFetch({ objectId: e.objectId }, !1);return i;
        }if ("Object" === e.__type) {
          n = e.className;var s = r.clone(e);delete s.__type, delete s.className;var a = u.Object._create(n);return a._finishFetch(s, !0), a;
        }if ("Date" === e.__type) return u._parseDate(e.iso);if ("GeoPoint" === e.__type) return new u.GeoPoint({ latitude: e.latitude, longitude: e.longitude });if ("Relation" === e.__type) {
          if (!t) throw new Error("key missing decoding a Relation");var c = new u.Relation(null, t);return c.targetClassName = e.className, c;
        }if ("File" === e.__type) {
          var l = new u.File(e.name),
              h = r.clone(e);return delete h.__type, l._finishFetch(h), l;
        }return r.mapObject(e, u._decode);
      }, u.parseJSON = u._decode, u._encodeObjectOrArray = function (e) {
        var t = function t(e) {
          return e && e._toFullJSON && (e = e._toFullJSON([])), r.mapObject(e, function (e) {
            return u._encode(e, []);
          });
        };return r.isArray(e) ? e.map(function (e) {
          return t(e);
        }) : t(e);
      }, u._arrayEach = r.each, u._traverse = function (e, t, n) {
        if (e instanceof u.Object) {
          if (n = n || [], r.indexOf(n, e) >= 0) return;return n.push(e), u._traverse(e.attributes, t, n), t(e);
        }return e instanceof u.Relation || e instanceof u.File ? t(e) : r.isArray(e) ? (r.each(e, function (r, i) {
          var o = u._traverse(r, t, n);o && (e[i] = o);
        }), t(e)) : r.isObject(e) ? (u._each(e, function (r, i) {
          var o = u._traverse(r, t, n);o && (e[i] = o);
        }), t(e)) : t(e);
      }, u._objectEach = u._each = function (e, t) {
        r.isObject(e) ? r.each(r.keys(e), function (n) {
          t(e[n], n);
        }) : r.each(e, t);
      }, e.exports = u;
    }).call(t, n(8));
  }, function (e, t, n) {
    function r() {
      return !("undefined" == typeof window || !window.process || "renderer" !== window.process.type) || ("undefined" == typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && ("undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    }function i(e) {
      var n = this.useColors;if (e[0] = (n ? "%c" : "") + this.namespace + (n ? " %c" : " ") + e[0] + (n ? "%c " : " ") + "+" + t.humanize(this.diff), n) {
        var r = "color: " + this.color;e.splice(1, 0, r, "color: inherit");var i = 0,
            o = 0;e[0].replace(/%[a-zA-Z%]/g, function (e) {
          "%%" !== e && (i++, "%c" === e && (o = i));
        }), e.splice(o, 0, r);
      }
    }function o() {
      return "object" == (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
    }function s(e) {
      try {
        null == e ? t.storage.removeItem("debug") : t.storage.debug = e;
      } catch (e) {}
    }function a() {
      var e;try {
        e = t.storage.debug;
      } catch (e) {}return !e && "undefined" != typeof process && "env" in process && (e = process.env.DEBUG), e;
    }t = e.exports = n(55), t.log = o, t.formatArgs = i, t.save = s, t.load = a, t.useColors = r, t.storage = "undefined" != typeof chrome && void 0 !== chrome.storage ? chrome.storage.local : function () {
      try {
        return window.localStorage;
      } catch (e) {}
    }(), t.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], t.formatters.j = function (e) {
      try {
        return JSON.stringify(e);
      } catch (e) {
        return "[UnexpectedJSONParseError]: " + e.message;
      }
    }, t.enable(a());
  }, function (e, t, n) {
    function r() {}function i(e) {
      if (!_(e)) return e;var t = [];for (var n in e) {
        o(t, n, e[n]);
      }return t.join("&");
    }function o(e, t, n) {
      if (null != n) {
        if (Array.isArray(n)) n.forEach(function (n) {
          o(e, t, n);
        });else if (_(n)) for (var r in n) {
          o(e, t + "[" + r + "]", n[r]);
        } else e.push(encodeURIComponent(t) + "=" + encodeURIComponent(n));
      } else null === n && e.push(encodeURIComponent(t));
    }function s(e) {
      for (var t, n, r = {}, i = e.split("&"), o = 0, s = i.length; o < s; ++o) {
        t = i[o], n = t.indexOf("="), -1 == n ? r[decodeURIComponent(t)] = "" : r[decodeURIComponent(t.slice(0, n))] = decodeURIComponent(t.slice(n + 1));
      }return r;
    }function a(e) {
      for (var t, n, r, i, o = e.split(/\r?\n/), s = {}, a = 0, u = o.length; a < u; ++a) {
        n = o[a], -1 !== (t = n.indexOf(":")) && (r = n.slice(0, t).toLowerCase(), i = g(n.slice(t + 1)), s[r] = i);
      }return s;
    }function u(e) {
      return (/[\/+]json\b/.test(e)
      );
    }function c(e) {
      this.req = e, this.xhr = this.req.xhr, this.text = "HEAD" != this.req.method && ("" === this.xhr.responseType || "text" === this.xhr.responseType) || void 0 === this.xhr.responseType ? this.xhr.responseText : null, this.statusText = this.req.xhr.statusText;var t = this.xhr.status;1223 === t && (t = 204), this._setStatusProperties(t), this.header = this.headers = a(this.xhr.getAllResponseHeaders()), this.header["content-type"] = this.xhr.getResponseHeader("content-type"), this._setHeaderProperties(this.header), null === this.text && e._responseType ? this.body = this.xhr.response : this.body = "HEAD" != this.req.method ? this._parseBody(this.text ? this.text : this.xhr.response) : null;
    }function l(e, t) {
      var n = this;this._query = this._query || [], this.method = e, this.url = t, this.header = {}, this._header = {}, this.on("end", function () {
        var e = null,
            t = null;try {
          t = new c(n);
        } catch (t) {
          return e = new Error("Parser is unable to parse the response"), e.parse = !0, e.original = t, n.xhr ? (e.rawResponse = void 0 === n.xhr.responseType ? n.xhr.responseText : n.xhr.response, e.status = n.xhr.status ? n.xhr.status : null, e.statusCode = e.status) : (e.rawResponse = null, e.status = null), n.callback(e);
        }n.emit("response", t);var r;try {
          n._isResponseOK(t) || (r = new Error(t.statusText || "Unsuccessful HTTP response"));
        } catch (e) {
          r = e;
        }r ? (r.original = e, r.response = t, r.status = t.status, n.callback(r, t)) : n.callback(null, t);
      });
    }function h(e, t, n) {
      var r = m("DELETE", e);return "function" == typeof t && (n = t, t = null), t && r.send(t), n && r.end(n), r;
    }var f;"undefined" != typeof window ? f = window : "undefined" != typeof self ? f = self : (console.warn("Using browser-only version of superagent in non-browser environment"), f = this);var d = n(53),
        p = n(65),
        _ = n(21),
        v = n(66),
        y = n(64),
        m = t = e.exports = function (e, n) {
      return "function" == typeof n ? new t.Request("GET", e).end(n) : 1 == arguments.length ? new t.Request("GET", e) : new t.Request(e, n);
    };t.Request = l, m.getXHR = function () {
      if (!(!f.XMLHttpRequest || f.location && "file:" == f.location.protocol && f.ActiveXObject)) return new XMLHttpRequest();try {
        return new ActiveXObject("Microsoft.XMLHTTP");
      } catch (e) {}try {
        return new ActiveXObject("Msxml2.XMLHTTP.6.0");
      } catch (e) {}try {
        return new ActiveXObject("Msxml2.XMLHTTP.3.0");
      } catch (e) {}try {
        return new ActiveXObject("Msxml2.XMLHTTP");
      } catch (e) {}throw Error("Browser-only version of superagent could not find XHR");
    };var g = "".trim ? function (e) {
      return e.trim();
    } : function (e) {
      return e.replace(/(^\s*|\s*$)/g, "");
    };m.serializeObject = i, m.parseString = s, m.types = { html: "text/html", json: "application/json", xml: "text/xml", urlencoded: "application/x-www-form-urlencoded", form: "application/x-www-form-urlencoded", "form-data": "application/x-www-form-urlencoded" }, m.serialize = { "application/x-www-form-urlencoded": i, "application/json": JSON.stringify }, m.parse = { "application/x-www-form-urlencoded": s, "application/json": JSON.parse }, v(c.prototype), c.prototype._parseBody = function (e) {
      var t = m.parse[this.type];return this.req._parser ? this.req._parser(this, e) : (!t && u(this.type) && (t = m.parse["application/json"]), t && e && (e.length || e instanceof Object) ? t(e) : null);
    }, c.prototype.toError = function () {
      var e = this.req,
          t = e.method,
          n = e.url,
          r = "cannot " + t + " " + n + " (" + this.status + ")",
          i = new Error(r);return i.status = this.status, i.method = t, i.url = n, i;
    }, m.Response = c, d(l.prototype), p(l.prototype), l.prototype.type = function (e) {
      return this.set("Content-Type", m.types[e] || e), this;
    }, l.prototype.accept = function (e) {
      return this.set("Accept", m.types[e] || e), this;
    }, l.prototype.auth = function (e, t, n) {
      1 === arguments.length && (t = ""), "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && null !== t && (n = t, t = ""), n || (n = { type: "function" == typeof btoa ? "basic" : "auto" });var r = function r(e) {
        if ("function" == typeof btoa) return btoa(e);throw new Error("Cannot use basic auth, btoa is not a function");
      };return this._auth(e, t, n, r);
    }, l.prototype.query = function (e) {
      return "string" != typeof e && (e = i(e)), e && this._query.push(e), this;
    }, l.prototype.attach = function (e, t, n) {
      if (t) {
        if (this._data) throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(e, t, n || t.name);
      }return this;
    }, l.prototype._getFormData = function () {
      return this._formData || (this._formData = new f.FormData()), this._formData;
    }, l.prototype.callback = function (e, t) {
      if (this._shouldRetry(e, t)) return this._retry();var n = this._callback;this.clearTimeout(), e && (this._maxRetries && (e.retries = this._retries - 1), this.emit("error", e)), n(e, t);
    }, l.prototype.crossDomainError = function () {
      var e = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");e.crossDomain = !0, e.status = this.status, e.method = this.method, e.url = this.url, this.callback(e);
    }, l.prototype.buffer = l.prototype.ca = l.prototype.agent = function () {
      return console.warn("This is not supported in browser version of superagent"), this;
    }, l.prototype.pipe = l.prototype.write = function () {
      throw Error("Streaming is not supported in browser version of superagent");
    }, l.prototype._isHost = function (e) {
      return e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && !Array.isArray(e) && "[object Object]" !== Object.prototype.toString.call(e);
    }, l.prototype.end = function (e) {
      return this._endCalled && console.warn("Warning: .end() was called twice. This is not supported in superagent"), this._endCalled = !0, this._callback = e || r, this._finalizeQueryString(), this._end();
    }, l.prototype._end = function () {
      var e = this,
          t = this.xhr = m.getXHR(),
          n = this._formData || this._data;this._setTimeouts(), t.onreadystatechange = function () {
        var n = t.readyState;if (n >= 2 && e._responseTimeoutTimer && clearTimeout(e._responseTimeoutTimer), 4 == n) {
          var r;try {
            r = t.status;
          } catch (e) {
            r = 0;
          }if (!r) {
            if (e.timedout || e._aborted) return;return e.crossDomainError();
          }e.emit("end");
        }
      };var r = function r(t, n) {
        n.total > 0 && (n.percent = n.loaded / n.total * 100), n.direction = t, e.emit("progress", n);
      };if (this.hasListeners("progress")) try {
        t.onprogress = r.bind(null, "download"), t.upload && (t.upload.onprogress = r.bind(null, "upload"));
      } catch (e) {}try {
        this.username && this.password ? t.open(this.method, this.url, !0, this.username, this.password) : t.open(this.method, this.url, !0);
      } catch (e) {
        return this.callback(e);
      }if (this._withCredentials && (t.withCredentials = !0), !this._formData && "GET" != this.method && "HEAD" != this.method && "string" != typeof n && !this._isHost(n)) {
        var i = this._header["content-type"],
            o = this._serializer || m.serialize[i ? i.split(";")[0] : ""];!o && u(i) && (o = m.serialize["application/json"]), o && (n = o(n));
      }for (var s in this.header) {
        null != this.header[s] && this.header.hasOwnProperty(s) && t.setRequestHeader(s, this.header[s]);
      }return this._responseType && (t.responseType = this._responseType), this.emit("request", this), t.send(void 0 !== n ? n : null), this;
    }, m.agent = function () {
      return new y();
    }, ["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function (e) {
      y.prototype[e.toLowerCase()] = function (t, n) {
        var r = new m.Request(e, t);return this._setDefaults(r), n && r.end(n), r;
      };
    }), y.prototype.del = y.prototype.delete, m.get = function (e, t, n) {
      var r = m("GET", e);return "function" == typeof t && (n = t, t = null), t && r.query(t), n && r.end(n), r;
    }, m.head = function (e, t, n) {
      var r = m("HEAD", e);return "function" == typeof t && (n = t, t = null), t && r.query(t), n && r.end(n), r;
    }, m.options = function (e, t, n) {
      var r = m("OPTIONS", e);return "function" == typeof t && (n = t, t = null), t && r.send(t), n && r.end(n), r;
    }, m.del = h, m.delete = h, m.patch = function (e, t, n) {
      var r = m("PATCH", e);return "function" == typeof t && (n = t, t = null), t && r.send(t), n && r.end(n), r;
    }, m.post = function (e, t, n) {
      var r = m("POST", e);return "function" == typeof t && (n = t, t = null), t && r.send(t), n && r.end(n), r;
    }, m.put = function (e, t, n) {
      var r = m("PUT", e);return "function" == typeof t && (n = t, t = null), t && r.send(t), n && r.end(n), r;
    };
  }, function (e, t) {
    var n;n = function () {
      return this;
    }();try {
      n = n || Function("return this")() || (0, eval)("this");
    } catch (e) {
      "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (n = window);
    }e.exports = n;
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }var i = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        o = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }return function (t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
        s = function () {
      function e() {
        r(this, e), this._entries = [];
      }return o(e, [{ key: "append", value: function value(e, t) {
          if ("string" != typeof e) throw new TypeError("FormData name must be a string");if ("string" != typeof t && ("object" !== (void 0 === t ? "undefined" : i(t)) || "string" != typeof t.uri)) throw new TypeError("FormData value must be a string or { uri: tempFilePath }");this._entries.push([e, t]);
        } }, { key: "set", value: function value(e, t) {
          var n = this.get(e);n ? n[1] = t : this.append(e, t);
        } }, { key: "delete", value: function value(e) {
          this._entries = this._entries.filter(function (t) {
            return t[0] !== e;
          });
        } }, { key: "entries", value: function value() {
          return this._entries;
        } }, { key: "get", value: function value(e) {
          return this._entries.find(function (t) {
            return t[0] === e;
          });
        } }, { key: "getAll", value: function value(e) {
          return this._entries.filter(function (t) {
            return t[0] === e;
          });
        } }, { key: "has", value: function value(e) {
          return this._entries.some(function (t) {
            return t[0] === e;
          });
        } }, { key: "keys", value: function value() {
          return this._entries.map(function (e) {
            return e[0];
          });
        } }, { key: "values", value: function value() {
          return this._entries.map(function (e) {
            return e[1];
          });
        } }]), e;
    }();e.exports = s;
  }, function (e, t, n) {
    "use strict";
    var r = t.createUniqueKey = "undefined" != typeof Symbol ? Symbol : function (e) {
      return "[[" + e + "_" + Math.random().toFixed(8).slice(2) + "]]";
    };t.LISTENERS = r("listeners"), t.CAPTURE = 1, t.BUBBLE = 2, t.ATTRIBUTE = 3, t.newNode = function (e, t) {
      return { listener: e, kind: t, next: null };
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(12),
        i = n(5),
        o = t.removeAsync = r.removeItemAsync.bind(r),
        s = function s(e, t) {
      try {
        e = JSON.parse(e);
      } catch (e) {
        return null;
      }if (e) {
        return e.expiredAt && e.expiredAt < Date.now() ? o(t).then(function () {
          return null;
        }) : e.value;
      }return null;
    };t.getAsync = function (e) {
      return e = "AV/" + i.applicationId + "/" + e, r.getItemAsync(e).then(function (t) {
        return s(t, e);
      });
    }, t.setAsync = function (e, t, n) {
      var o = { value: t };return "number" == typeof n && (o.expiredAt = Date.now() + n), r.setItemAsync("AV/" + i.applicationId + "/" + e, JSON.stringify(o));
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        o = n(51),
        s = ["getItem", "setItem", "removeItem", "clear"];o.async ? r(s).each(function (e) {
      "function" != typeof o[e] && (o[e] = function () {
        var t = new Error("Synchronous API [" + e + "] is not available in this runtime.");throw t.code = "SYNC_API_NOT_AVAILABLE", t;
      });
    }) : r(s).each(function (e) {
      "function" == typeof o[e] && (o[e + "Async"] = function () {
        return i.resolve(o[e].apply(o, arguments));
      });
    }), e.exports = o;
  }, function (e, t, n) {
    "use strict";
    e.exports = "3.4.2";
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }var i = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }return function (t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
        o = function () {
      function e() {
        r(this, e);
      }return i(e, [{ key: "getItem", value: function value(e) {
          return wx.getStorageSync(e);
        } }, { key: "setItem", value: function value(e, t) {
          return wx.setStorageSync(e, t);
        } }, { key: "removeItem", value: function value(e) {
          return this.setItem(e, "");
        } }, { key: "clear", value: function value() {
          return wx.clearStorageSync();
        } }]), e;
    }();e.exports = new o();
  }, function (e, t, n) {
    "use strict";
    e.exports = {};
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function i(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function o(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }function s(e) {
      "" !== e.message && p && (p._readyState = f, p.dispatchEvent({ type: "error", message: e.errMsg }));
    }var a = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }return function (t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
        u = n(20),
        c = n(19),
        l = 0,
        h = 1,
        f = 3,
        d = ["open", "error", "message", "close"],
        p = void 0,
        _ = function (e) {
      function t(e, n) {
        if (r(this, t), !e) throw new TypeError("Failed to construct 'WebSocket': url required");if (n) throw new Error("subprotocal not supported in weapp");var o = i(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));return o._url = e, o._protocal = "", o._readyState = l, p && p.dispatchEvent({ type: "close" }), p = o, wx.onSocketOpen(function (e) {
          p && (p._readyState = h, p.dispatchEvent({ type: "open" }));
        }), wx.onSocketError(s), wx.onSocketMessage(function (e) {
          if (p) {
            var t = e.data,
                n = e.origin,
                r = e.ports,
                i = e.source;p.dispatchEvent({ data: t, origin: n, ports: r, source: i, type: "message" });
          }
        }), wx.onSocketClose(function (e) {
          if (p) {
            p._readyState = f;var t = e.code,
                n = e.reason,
                r = e.wasClean;p.dispatchEvent({ code: t, reason: n, wasClean: r, type: "close" }), p = null;
          }
        }), wx.connectSocket({ url: e, fail: function fail(e) {
            return setTimeout(function () {
              return s(e);
            }, 0);
          } }), o;
      }return o(t, e), a(t, [{ key: "close", value: function value() {
          this.readyState === l && console.warn("close WebSocket which is connecting might not work"), wx.closeSocket();
        } }, { key: "send", value: function value(e) {
          if (this.readyState !== h) throw new Error("INVALID_STATE_ERR");if ("string" != typeof e) throw new TypeError("only string typed data are supported");wx.sendSocketMessage({ data: e });
        } }, { key: "url", get: function get() {
          return this._url;
        } }, { key: "protocal", get: function get() {
          return this._protocal;
        } }, { key: "readyState", get: function get() {
          return this._readyState;
        } }]), t;
    }(c(d));u(_, { CONNECTING: l, OPEN: h, CLOSING: 2, CLOSED: f }), e.exports = _;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n) {
      return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e;
    }function i(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }function o(e, t) {
      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
    }function s(e, t) {
      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }function a(e) {
      this.status = e.statusCode, this.statusText = e.statusCode, e.header && (this._responseHeaders = Object.keys(e.header).reduce(function (t, n) {
        return t[n.toLowerCase()] = e.header[n], t;
      }, {}));var t = e.data;"string" != typeof t && (t = JSON.stringify(t)), this.responseText = this.response = t, this.readyState = d, this.dispatchEvent({ type: "readystatechange" });
    }var u = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }return function (t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
        c = n(20),
        l = n(19),
        h = n(9),
        f = 0,
        d = 4,
        p = ["abort", "error", "load", "loadstart", "progress", "timeout", "loadend", "readystatechange"],
        _ = ["abort", "error", "load", "loadstart", "progress", "timeout", "loadend"],
        v = function (e) {
      function t() {
        return i(this, t), o(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
      }return s(t, e), t;
    }(l(_)),
        y = function (e) {
      function t() {
        i(this, t);var e = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));return e.readyState = f, e._headers = {}, e.upload = new v(), e;
      }return s(t, e), u(t, [{ key: "abort", value: function value() {
          if (!this._request || this._request.abort) return this.status = 0, this.readyState = d, this._request.abort();throw new Error("è¯¥ç‰ˆæœ¬åŸºç¡€åº“ä¸æ”¯æŒ abort request");
        } }, { key: "getAllResponseHeaders", value: function value() {
          var e = this;return this._responseHeaders ? Object.keys(this._responseHeaders).map(function (t) {
            return t + ": " + e._responseHeaders[t];
          }).join("\r\n") : "";
        } }, { key: "getResponseHeader", value: function value(e) {
          var t = e.toLowerCase();return this._responseHeaders && this._responseHeaders[t] ? this._responseHeaders[t] : null;
        } }, { key: "overrideMimeType", value: function value() {
          throw new Error("not supported in weapp");
        } }, { key: "open", value: function value(e, t) {
          var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];if (this.readyState !== f) throw new Error("request is already opened");if (!n) throw new Error("sync request is not supported");this._method = e, this._url = t, this.readyState = 1, this.dispatchEvent({ type: "readystatechange" });
        } }, { key: "setRequestHeader", value: function value(e, t) {
          if (1 !== this.readyState) throw new Error("request is not opened");this._headers[e.toLowerCase()] = t;
        } }, { key: "send", value: function value(e) {
          var t = this;if (1 !== this.readyState) throw new Error("request is not opened");if (e instanceof h) {
            var n = e.entries(),
                i = n.filter(function (e) {
              return "string" != typeof e[1];
            });if (0 === i.length) throw new Error("Must specify a Blob field in FormData");i.length > 1 && console.warn("Only the first Blob will be send in Weapp");var o = n.filter(function (e) {
              return "string" == typeof e[1];
            }).reduce(function (e, t) {
              return c(e, r({}, t[0], t[1]));
            }, {});this._request = wx.uploadFile({ url: this._url, name: i[0][0], filePath: i[0][1].uri, formData: o, header: this._headers, success: a.bind(this), fail: function fail(e) {
                t.status = 0, t.readyState = d, t.dispatchEvent({ type: "readystatechange" }), t.dispatchEvent({ type: "error" });
              } }), this._request && this._request.onProgressUpdate && this._request.onProgressUpdate(function (e) {
              var n = e.totalBytesSent,
                  r = e.totalBytesExpectedToSend;t.upload.dispatchEvent({ type: "progress", loaded: n, total: r });
            });
          } else this._request = wx.request({ url: this._url, data: e || "", method: this._method.toUpperCase(), header: this._headers, success: a.bind(this), fail: function fail(e) {
              t.status = 0, t.readyState = d, t.dispatchEvent({ type: "readystatechange" }), t.dispatchEvent({ type: "error" });
            } });
        } }]), t;
    }(l(p));c(y, { UNSENT: f, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: d }), e.exports = y;
  }, function (e, t) {
    var n = { utf8: { stringToBytes: function stringToBytes(e) {
          return n.bin.stringToBytes(unescape(encodeURIComponent(e)));
        }, bytesToString: function bytesToString(e) {
          return decodeURIComponent(escape(n.bin.bytesToString(e)));
        } }, bin: { stringToBytes: function stringToBytes(e) {
          for (var t = [], n = 0; n < e.length; n++) {
            t.push(255 & e.charCodeAt(n));
          }return t;
        }, bytesToString: function bytesToString(e) {
          for (var t = [], n = 0; n < e.length; n++) {
            t.push(String.fromCharCode(e[n]));
          }return t.join("");
        } } };e.exports = n;
  }, function (e, t, n) {
    "use strict";
    var r = n(10),
        i = n(57),
        o = n(58),
        s = r.LISTENERS,
        a = r.CAPTURE,
        u = r.BUBBLE,
        c = r.ATTRIBUTE,
        l = r.newNode,
        h = i.defineCustomEventTarget,
        f = o.createEventWrapper,
        d = o.STOP_IMMEDIATE_PROPAGATION_FLAG,
        p = "undefined" != typeof window && void 0 !== window.EventTarget,
        _ = e.exports = function e() {
      if (!(this instanceof e)) {
        if (1 === arguments.length && Array.isArray(arguments[0])) return h(e, arguments[0]);if (arguments.length > 0) {
          for (var t = Array(arguments.length), n = 0; n < arguments.length; ++n) {
            t[n] = arguments[n];
          }return h(e, t);
        }throw new TypeError("Cannot call a class as a function");
      }Object.defineProperty(this, s, { value: Object.create(null) });
    };_.prototype = Object.create((p ? window.EventTarget : Object).prototype, { constructor: { value: _, writable: !0, configurable: !0 }, addEventListener: { value: function value(e, t, n) {
          if (null == t) return !1;if ("function" != typeof t && "object" != (typeof t === "undefined" ? "undefined" : _typeof(t))) throw new TypeError('"listener" is not an object.');var r = n ? a : u,
              i = this[s][e];if (null == i) return this[s][e] = l(t, r), !0;for (var o = null; null != i;) {
            if (i.listener === t && i.kind === r) return !1;o = i, i = i.next;
          }return o.next = l(t, r), !0;
        }, configurable: !0, writable: !0 }, removeEventListener: { value: function value(e, t, n) {
          if (null == t) return !1;for (var r = n ? a : u, i = null, o = this[s][e]; null != o;) {
            if (o.listener === t && o.kind === r) return null == i ? this[s][e] = o.next : i.next = o.next, !0;i = o, o = o.next;
          }return !1;
        }, configurable: !0, writable: !0 }, dispatchEvent: { value: function value(e) {
          var t = this[s][e.type];if (null == t) return !0;for (var n = f(e, this); null != t && ("function" == typeof t.listener ? t.listener.call(this, n) : t.kind !== c && "function" == typeof t.listener.handleEvent && t.listener.handleEvent(n), !n[d]);) {
            t = t.next;
          }return !n.defaultPrevented;
        }, configurable: !0, writable: !0 } });
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      if (null === e || void 0 === e) throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e);
    } /*
      object-assign
      (c) Sindre Sorhus
      @license MIT
      */
    var i = Object.getOwnPropertySymbols,
        o = Object.prototype.hasOwnProperty,
        s = Object.prototype.propertyIsEnumerable;e.exports = function () {
      try {
        if (!Object.assign) return !1;var e = new String("abc");if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0]) return !1;for (var t = {}, n = 0; n < 10; n++) {
          t["_" + String.fromCharCode(n)] = n;
        }if ("0123456789" !== Object.getOwnPropertyNames(t).map(function (e) {
          return t[e];
        }).join("")) return !1;var r = {};return "abcdefghijklmnopqrst".split("").forEach(function (e) {
          r[e] = e;
        }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r)).join("");
      } catch (e) {
        return !1;
      }
    }() ? Object.assign : function (e, t) {
      for (var n, a, u = r(e), c = 1; c < arguments.length; c++) {
        n = Object(arguments[c]);for (var l in n) {
          o.call(n, l) && (u[l] = n[l]);
        }if (i) {
          a = i(n);for (var h = 0; h < a.length; h++) {
            s.call(n, a[h]) && (u[a[h]] = n[a[h]]);
          }
        }
      }return u;
    };
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      return null !== e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e));
    }e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(0);e.exports = function (e) {
      e.ACL = function (t) {
        var n = this;if (n.permissionsById = {}, r.isObject(t)) if (t instanceof e.User) n.setReadAccess(t, !0), n.setWriteAccess(t, !0);else {
          if (r.isFunction(t)) throw new Error("AV.ACL() called with a function.  Did you forget ()?");e._objectEach(t, function (t, i) {
            if (!r.isString(i)) throw new Error("Tried to create an ACL with an invalid userId.");n.permissionsById[i] = {}, e._objectEach(t, function (e, t) {
              if ("read" !== t && "write" !== t) throw new Error("Tried to create an ACL with an invalid permission type.");if (!r.isBoolean(e)) throw new Error("Tried to create an ACL with an invalid permission value.");n.permissionsById[i][t] = e;
            });
          });
        }
      }, e.ACL.prototype.toJSON = function () {
        return r.clone(this.permissionsById);
      }, e.ACL.prototype._setAccess = function (t, n, i) {
        if (n instanceof e.User ? n = n.id : n instanceof e.Role && (n = "role:" + n.getName()), !r.isString(n)) throw new Error("userId must be a string.");if (!r.isBoolean(i)) throw new Error("allowed must be either true or false.");var o = this.permissionsById[n];if (!o) {
          if (!i) return;o = {}, this.permissionsById[n] = o;
        }i ? this.permissionsById[n][t] = !0 : (delete o[t], r.isEmpty(o) && delete this.permissionsById[n]);
      }, e.ACL.prototype._getAccess = function (t, n) {
        n instanceof e.User ? n = n.id : n instanceof e.Role && (n = "role:" + n.getName());var r = this.permissionsById[n];return !!r && !!r[t];
      }, e.ACL.prototype.setReadAccess = function (e, t) {
        this._setAccess("read", e, t);
      }, e.ACL.prototype.getReadAccess = function (e) {
        return this._getAccess("read", e);
      }, e.ACL.prototype.setWriteAccess = function (e, t) {
        this._setAccess("write", e, t);
      }, e.ACL.prototype.getWriteAccess = function (e) {
        return this._getAccess("write", e);
      }, e.ACL.prototype.setPublicReadAccess = function (e) {
        this.setReadAccess("*", e);
      }, e.ACL.prototype.getPublicReadAccess = function () {
        return this.getReadAccess("*");
      }, e.ACL.prototype.setPublicWriteAccess = function (e) {
        this.setWriteAccess("*", e);
      }, e.ACL.prototype.getPublicWriteAccess = function () {
        return this.getWriteAccess("*");
      }, e.ACL.prototype.getRoleReadAccess = function (t) {
        if (t instanceof e.Role && (t = t.getName()), r.isString(t)) return this.getReadAccess("role:" + t);throw new Error("role must be a AV.Role or a String");
      }, e.ACL.prototype.getRoleWriteAccess = function (t) {
        if (t instanceof e.Role && (t = t.getName()), r.isString(t)) return this.getWriteAccess("role:" + t);throw new Error("role must be a AV.Role or a String");
      }, e.ACL.prototype.setRoleReadAccess = function (t, n) {
        if (t instanceof e.Role && (t = t.getName()), r.isString(t)) return void this.setReadAccess("role:" + t, n);throw new Error("role must be a AV.Role or a String");
      }, e.ACL.prototype.setRoleWriteAccess = function (t, n) {
        if (t instanceof e.Role && (t = t.getName()), r.isString(t)) return void this.setWriteAccess("role:" + t, n);throw new Error("role must be a AV.Role or a String");
      };
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(3),
        o = i.tap;e.exports = function (e) {
      e.Captcha = function (e, t) {
        this._options = e, this._authOptions = t, this.url = void 0, this.captchaToken = void 0, this.validateToken = void 0;
      }, e.Captcha.prototype.refresh = function () {
        var t = this;return e.Cloud._requestCaptcha(this._options, this._authOptions).then(function (e) {
          var n = e.captchaToken,
              i = e.url;return r.extend(t, { captchaToken: n, url: i }), i;
        });
      }, e.Captcha.prototype.verify = function (t) {
        var n = this;return e.Cloud.verifyCaptcha(t, this.captchaToken).then(o(function (e) {
          return n.validateToken = e;
        }));
      }, e.Captcha.request = function (t, n) {
        var r = new e.Captcha(t, n);return r.refresh().then(function () {
          return r;
        });
      };
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(2),
        o = i._request,
        s = i.request,
        a = n(1);e.exports = function (e) {
      e.Cloud = e.Cloud || {}, r.extend(e.Cloud, { run: function run(t, n, r) {
          return s({ service: "engine", method: "POST", path: "/functions/" + t, data: e._encode(n, null, !0), authOptions: r }).then(function (t) {
            return e._decode(t).result;
          });
        }, rpc: function rpc(t, n, i) {
          return r.isArray(n) ? a.reject(new Error("Can't pass Array as the param of rpc function in JavaScript SDK.")) : s({ service: "engine", method: "POST", path: "/call/" + t, data: e._encodeObjectOrArray(n), authOptions: i }).then(function (t) {
            return e._decode(t).result;
          });
        }, getServerDate: function getServerDate() {
          return o("date", null, null, "GET").then(function (t) {
            return e._decode(t);
          });
        }, requestSmsCode: function requestSmsCode(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (r.isString(e) && (e = { mobilePhoneNumber: e }), !e.mobilePhoneNumber) throw new Error("Missing mobilePhoneNumber.");return t.validateToken && (e = r.extend({}, e, { validate_token: t.validateToken })), o("requestSmsCode", null, null, "POST", e, t);
        }, verifySmsCode: function verifySmsCode(e, t) {
          if (!e) throw new Error("Missing sms code.");var n = {};return r.isString(t) && (n.mobilePhoneNumber = t), o("verifySmsCode", e, null, "POST", n);
        }, _requestCaptcha: function _requestCaptcha(e, t) {
          return o("requestCaptcha", null, null, "GET", e, t).then(function (e) {
            var t = e.captcha_url;return { captchaToken: e.captcha_token, url: t };
          });
        }, requestCaptcha: e.Captcha.request, verifyCaptcha: function verifyCaptcha(e, t) {
          return o("verifyCaptcha", null, null, "POST", { captcha_code: e, captcha_token: t }).then(function (e) {
            return e.validate_token;
          });
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(2),
        o = i._request,
        s = n(5);e.exports = s.Object.extend("_Conversation", { constructor: function constructor(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};s.Object.prototype.constructor.call(this, null, null), this.set("name", e), void 0 !== t.isSystem && this.set("sys", !!t.isSystem), void 0 !== t.isTransient && this.set("tr", !!t.isTransient);
      }, getCreator: function getCreator() {
        return this.get("c");
      }, getLastMessageAt: function getLastMessageAt() {
        return this.get("lm");
      }, getMembers: function getMembers() {
        return this.get("m");
      }, addMember: function addMember(e) {
        return this.add("m", e);
      }, getMutedMembers: function getMutedMembers() {
        return this.get("mu");
      }, getName: function getName() {
        return this.get("name");
      }, isTransient: function isTransient() {
        return this.get("tr");
      }, isSystem: function isSystem() {
        return this.get("sys");
      }, send: function send(e, t) {
        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
            r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};"function" == typeof t.toJSON && (t = t.toJSON()), "string" != typeof t && (t = JSON.stringify(t));var i = { from_peer: e, conv_id: this.id, transient: !1, message: t };return void 0 !== n.toClients && (i.to_peers = n.toClients), void 0 !== n.transient && (i.transient = !!n.transient), void 0 !== n.pushData && (i.push_data = n.pushData), o("rtm", "messages", null, "POST", i, r);
      }, broadcast: function broadcast(e, t) {
        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
            i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};"function" == typeof t.toJSON && (t = t.toJSON()), "string" != typeof t && (t = JSON.stringify(t));var s = { from_peer: e, conv_id: this.id, message: t };if (void 0 !== n.pushData && (s.push = n.pushData), void 0 !== n.validTill) {
          var a = n.validTill;r.isDate(a) && (a = a.getTime()), n.valid_till = a;
        }return o("rtm", "broadcast", null, "POST", s, i);
      } });
  }, function (e, t, n) {
    "use strict";
    var r = n(0);e.exports = function (e) {
      var t = /\s+/,
          n = Array.prototype.slice;e.Events = { on: function on(e, n, r) {
          var i, o, s, a, u;if (!n) return this;for (e = e.split(t), i = this._callbacks || (this._callbacks = {}), o = e.shift(); o;) {
            u = i[o], s = u ? u.tail : {}, s.next = a = {}, s.context = r, s.callback = n, i[o] = { tail: a, next: u ? u.next : s }, o = e.shift();
          }return this;
        }, off: function off(e, n, i) {
          var o, s, a, u, c, l;if (s = this._callbacks) {
            if (!(e || n || i)) return delete this._callbacks, this;for (e = e ? e.split(t) : r.keys(s), o = e.shift(); o;) {
              if (a = s[o], delete s[o], a && (n || i)) {
                for (u = a.tail, a = a.next; a !== u;) {
                  c = a.callback, l = a.context, (n && c !== n || i && l !== i) && this.on(o, c, l), a = a.next;
                }o = e.shift();
              }
            }return this;
          }
        }, trigger: function trigger(e) {
          var r, i, o, s, a, u, c;if (!(o = this._callbacks)) return this;for (u = o.all, e = e.split(t), c = n.call(arguments, 1), r = e.shift(); r;) {
            if (i = o[r]) for (s = i.tail; (i = i.next) !== s;) {
              i.callback.apply(i.context || this, c);
            }if (i = u) for (s = i.tail, a = [r].concat(c); (i = i.next) !== s;) {
              i.callback.apply(i.context || this, a);
            }r = e.shift();
          }return this;
        } }, e.Events.bind = e.Events.on, e.Events.unbind = e.Events.off;
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(48),
        o = n(49),
        s = n(50),
        a = n(4),
        u = n(2)._request,
        c = n(1),
        l = n(3),
        h = l.tap,
        f = l.transformFetchOptions,
        d = n(6)("leancloud:file"),
        p = n(52);e.exports = function (e) {
      var t = function t() {
        return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
      },
          n = function n(e) {
        return r.isString(e) ? e.match(/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/)[4] : "";
      },
          l = function l(e) {
        if (e < 26) return String.fromCharCode(65 + e);if (e < 52) return String.fromCharCode(e - 26 + 97);if (e < 62) return String.fromCharCode(e - 52 + 48);if (62 === e) return "+";if (63 === e) return "/";throw new Error("Tried to encode large digit " + e + " in base64.");
      },
          _ = function _(e) {
        var t = [];return t.length = Math.ceil(e.length / 3), r.times(t.length, function (n) {
          var r = e[3 * n],
              i = e[3 * n + 1] || 0,
              o = e[3 * n + 2] || 0,
              s = 3 * n + 1 < e.length,
              a = 3 * n + 2 < e.length;t[n] = [l(r >> 2 & 63), l(r << 4 & 48 | i >> 4 & 15), s ? l(i << 2 & 60 | o >> 6 & 3) : "=", a ? l(63 & o) : "="].join("");
        }), t.join("");
      };e.File = function (t, i, o) {
        if (this.attributes = { name: t, url: "", metaData: {}, base64: "" }, r.isString(i)) throw new TypeError("Creating an AV.File from a String is not yet supported.");r.isArray(i) && (this.attributes.metaData.size = i.length, i = { base64: _(i) }), this._extName = "", this._data = i, this._uploadHeaders = {}, i && i.blob && (this._extName = n(i.blob.uri)), "undefined" != typeof Blob && i instanceof Blob && (i.size && (this.attributes.metaData.size = i.size), i.name && (this._extName = n(i.name)));var s = void 0;if (i && i.owner) s = i.owner;else if (!e._config.disableCurrentUser) try {
          s = e.User.current();
        } catch (e) {
          if ("SYNC_API_NOT_AVAILABLE" !== e.code) throw e;console.warn("Get current user failed. It seems this runtime use an async storage system, please create AV.File in the callback of AV.User.currentAsync().");
        }this.attributes.metaData.owner = s ? s.id : "unknown", this.set("mime_type", o);
      }, e.File.withURL = function (t, n, r, i) {
        if (!t || !n) throw new Error("Please provide file name and url");var o = new e.File(t, null, i);if (r) for (var s in r) {
          o.attributes.metaData[s] || (o.attributes.metaData[s] = r[s]);
        }return o.attributes.url = n, o.attributes.metaData.__source = "external", o;
      }, e.File.createWithoutData = function (t) {
        var n = new e.File();return n.id = t, n;
      }, r.extend(e.File.prototype, { className: "_File", _toFullJSON: function _toFullJSON(t) {
          var n = this,
              i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
              o = r.clone(this.attributes);return e._objectEach(o, function (n, r) {
            o[r] = e._encode(n, t, void 0, i);
          }), e._objectEach(this._operations, function (e, t) {
            o[t] = e;
          }), r.has(this, "id") && (o.objectId = this.id), r(["createdAt", "updatedAt"]).each(function (e) {
            if (r.has(n, e)) {
              var t = n[e];o[e] = r.isDate(t) ? t.toJSON() : t;
            }
          }), i && (o.__type = "File"), o;
        }, toFullJSON: function toFullJSON() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];return this._toFullJSON(e);
        }, toJSON: function toJSON(e, t) {
          var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [this];return this._toFullJSON(n, !1);
        }, getACL: function getACL() {
          return this._acl;
        }, setACL: function setACL(t) {
          if (!(t instanceof e.ACL)) return new a(a.OTHER_CAUSE, "ACL must be a AV.ACL.");this._acl = t;
        }, name: function name() {
          return this.get("name");
        }, url: function url() {
          return this.get("url");
        }, get: function get(e) {
          switch (e) {case "objectId":
              return this.id;case "url":case "name":case "mime_type":case "metaData":case "createdAt":case "updatedAt":
              return this.attributes[e];default:
              return this.attributes.metaData[e];}
        }, set: function set() {
          for (var e = this, t = function t(_t3, n) {
            switch (_t3) {case "name":case "url":case "mime_type":case "base64":case "metaData":
                e.attributes[_t3] = n;break;default:
                e.attributes.metaData[_t3] = n;}
          }, n = arguments.length, r = Array(n), i = 0; i < n; i++) {
            r[i] = arguments[i];
          }switch (r.length) {case 1:
              for (var o in r[0]) {
                t(o, r[0][o]);
              }break;case 2:
              t(r[0], r[1]);}
        }, setUploadHeader: function setUploadHeader(e, t) {
          return this._uploadHeaders[e] = t, this;
        }, metaData: function metaData(e, t) {
          return e && t ? (this.attributes.metaData[e] = t, this) : e && !t ? this.attributes.metaData[e] : this.attributes.metaData;
        }, thumbnailURL: function thumbnailURL(e, t, n, r, i) {
          var o = this.attributes.url;if (!o) throw new Error("Invalid url.");if (!e || !t || e <= 0 || t <= 0) throw new Error("Invalid width or height value.");if (n = n || 100, r = r || !0, n <= 0 || n > 100) throw new Error("Invalid quality value.");return i = i || "png", o + "?imageView/" + (r ? 2 : 1) + "/w/" + e + "/h/" + t + "/q/" + n + "/format/" + i;
        }, size: function size() {
          return this.metaData().size;
        }, ownerId: function ownerId() {
          return this.metaData().owner;
        }, destroy: function destroy(e) {
          return this.id ? u("files", null, this.id, "DELETE", null, e) : c.reject(new Error("The file id is not eixsts."));
        }, _fileToken: function _fileToken(e) {
          var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "fileTokens",
              i = this.attributes.name,
              o = n(i);!o && this._extName && (i += this._extName, o = this._extName);var s = t() + t() + t() + t() + t() + o,
              a = { key: s, name: i, ACL: this._acl, mime_type: e, metaData: this.attributes.metaData };return this._qiniu_key = s, u(r, null, null, "POST", a);
        }, save: function save(e) {
          var t = this;if (this.id) throw new Error("File already saved. If you want to manipulate a file, use AV.Query to get it.");if (!this._previousSave) if (this._data) {
            var n = this.get("mime_type");this._previousSave = this._fileToken(n).then(function (r) {
              return r.mime_type && (n = r.mime_type, t.set("mime_type", n)), t._token = r.token, c.resolve().then(function () {
                var e = t._data;if (e && e.base64) return p(e.base64, n);if (e && e.blob) return !e.blob.type && n && (e.blob.type = n), e.blob.name || (e.blob.name = t.get("name")), e.blob;if ("undefined" != typeof Blob && e instanceof Blob) return e;throw new TypeError("malformed file data");
              }).then(function (n) {
                switch (r.provider) {case "s3":
                    return s(r, n, t, e);case "qcloud":
                    return i(r, n, t, e);case "qiniu":default:
                    return o(r, n, t, e);}
              }).then(h(function () {
                return t._callback(!0);
              }), function (e) {
                throw t._callback(!1), e;
              });
            });
          } else if (this.attributes.url && "external" === this.attributes.metaData.__source) {
            var r = { name: this.attributes.name, ACL: this._acl, metaData: this.attributes.metaData, mime_type: this.mimeType, url: this.attributes.url };this._previousSave = u("files", this.attributes.name, null, "post", r).then(function (e) {
              return t.attributes.name = e.name, t.attributes.url = e.url, t.id = e.objectId, e.size && (t.attributes.metaData.size = e.size), t;
            });
          }return this._previousSave;
        }, _callback: function _callback(e) {
          u("fileCallback", null, null, "post", { token: this._token, result: e }).catch(d), delete this._token, delete this._data;
        }, fetch: function fetch(e, t) {
          return u("files", null, this.id, "GET", f(e), t).then(this._finishFetch.bind(this));
        }, _finishFetch: function _finishFetch(t) {
          var n = e.Object.prototype.parse(t);return n.attributes = { name: n.name, url: n.url, mime_type: n.mime_type, bucket: n.bucket }, n.attributes.metaData = n.metaData || {}, n.id = n.objectId, delete n.objectId, delete n.metaData, delete n.url, delete n.name, delete n.mime_type, delete n.bucket, r.extend(this, n), this;
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0);e.exports = function (e) {
      e.GeoPoint = function (t, n) {
        r.isArray(t) ? (e.GeoPoint._validate(t[0], t[1]), this.latitude = t[0], this.longitude = t[1]) : r.isObject(t) ? (e.GeoPoint._validate(t.latitude, t.longitude), this.latitude = t.latitude, this.longitude = t.longitude) : r.isNumber(t) && r.isNumber(n) ? (e.GeoPoint._validate(t, n), this.latitude = t, this.longitude = n) : (this.latitude = 0, this.longitude = 0);var i = this;this.__defineGetter__ && this.__defineSetter__ && (this._latitude = this.latitude, this._longitude = this.longitude, this.__defineGetter__("latitude", function () {
          return i._latitude;
        }), this.__defineGetter__("longitude", function () {
          return i._longitude;
        }), this.__defineSetter__("latitude", function (t) {
          e.GeoPoint._validate(t, i.longitude), i._latitude = t;
        }), this.__defineSetter__("longitude", function (t) {
          e.GeoPoint._validate(i.latitude, t), i._longitude = t;
        }));
      }, e.GeoPoint._validate = function (e, t) {
        if (e < -90) throw new Error("AV.GeoPoint latitude " + e + " < -90.0.");if (e > 90) throw new Error("AV.GeoPoint latitude " + e + " > 90.0.");if (t < -180) throw new Error("AV.GeoPoint longitude " + t + " < -180.0.");if (t > 180) throw new Error("AV.GeoPoint longitude " + t + " > 180.0.");
      }, e.GeoPoint.current = function () {
        return new e.Promise(function (t, n) {
          navigator.geolocation.getCurrentPosition(function (n) {
            t(new e.GeoPoint({ latitude: n.coords.latitude, longitude: n.coords.longitude }));
          }, n);
        });
      }, r.extend(e.GeoPoint.prototype, { toJSON: function toJSON() {
          return e.GeoPoint._validate(this.latitude, this.longitude), { __type: "GeoPoint", latitude: this.latitude, longitude: this.longitude };
        }, radiansTo: function radiansTo(e) {
          var t = Math.PI / 180,
              n = this.latitude * t,
              r = this.longitude * t,
              i = e.latitude * t,
              o = e.longitude * t,
              s = n - i,
              a = r - o,
              u = Math.sin(s / 2),
              c = Math.sin(a / 2),
              l = u * u + Math.cos(n) * Math.cos(i) * c * c;return l = Math.min(1, l), 2 * Math.asin(Math.sqrt(l));
        }, kilometersTo: function kilometersTo(e) {
          return 6371 * this.radiansTo(e);
        }, milesTo: function milesTo(e) {
          return 3958.8 * this.radiansTo(e);
        } });
    };
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      if ("us" === t) return h("https://us-api.leancloud.cn");var n = void 0;switch (e.slice(-9)) {case "-9Nh9j0Va":
          return h("https://e1-api.leancloud.cn");case "-MdYXbMMI":
          return h("https://us-api.leancloud.cn");default:
          return n = e.slice(0, 8).toLowerCase(), { push: "https://" + n + ".push.lncld.net", stats: "https://" + n + ".stats.lncld.net", engine: "https://" + n + ".engine.lncld.net", api: "https://" + n + ".api.lncld.net" };}
    }var i = n(5),
        o = n(44),
        s = n(3),
        a = s.isNullOrUndefined,
        u = n(0),
        c = u.extend,
        l = u.isObject,
        h = function h(e) {
      return { push: e, stats: e, engine: e, api: e };
    },
        f = !1;i.init = function (e) {
      if (!l(e)) return i.init({ appId: e, appKey: arguments.length <= 1 ? void 0 : arguments[1], masterKey: arguments.length <= 2 ? void 0 : arguments[2], region: arguments.length <= 3 ? void 0 : arguments[3] });var t = e.appId,
          n = e.appKey,
          s = e.masterKey,
          a = (e.hookKey, e.region),
          u = void 0 === a ? "cn" : a,
          h = e.serverURLs,
          d = e.disableCurrentUser,
          p = e.production,
          _ = e.realtime;if (i.applicationId) throw new Error("SDK is already initialized.");if (!t) throw new TypeError("appId must be a string");if (!n) throw new TypeError("appKey must be a string");s && console.warn("MasterKey is not supposed to be used in browser."), i._config.applicationId = t, i._config.applicationKey = n, i._config.masterKey = s, void 0 !== p && (i._config.production = p), void 0 !== d && (i._config.disableCurrentUser = d), i._appRouter = new o(i);var v = f || void 0 !== h || "cn" !== u;i._setServerURLs(c({}, r(t, u), i._config.serverURLs, h), v), _ ? i._config.realtime = _ : i._sharedConfig.liveQueryRealtime && (i._config.realtime = new i._sharedConfig.liveQueryRealtime({ appId: t, region: u }));
    }, i.setProduction = function (e) {
      a(e) ? i._config.production = null : i._config.production = e ? 1 : 0;
    }, i._setServerURLs = function (e) {
      var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];"string" != typeof e ? c(i._config.serverURLs, e) : i._config.serverURLs = h(e), t && (i._appRouter ? i._appRouter.disable() : f = !0);
    }, i.setServerURLs = function (e) {
      return i._setServerURLs(e);
    }, i.keepErrorRawMessage = function (e) {
      i._sharedConfig.keepErrorRawMessage = e;
    }, i.initialize = i.init, ["applicationId", "applicationKey", "masterKey", "hookKey"].forEach(function (e) {
      return Object.defineProperty(i, e, { get: function get() {
          return i._config[e];
        }, set: function set(t) {
          i._config[e] = t;
        } });
    });
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(4),
        o = n(2),
        s = o.request;e.exports = function (e) {
      e.Insight = e.Insight || {}, r.extend(e.Insight, { startJob: function startJob(t, n) {
          if (!t || !t.sql) throw new Error("Please provide the sql to run the job.");var r = { jobConfig: t, appId: e.applicationId };return s({ path: "/bigquery/jobs", method: "POST", data: e._encode(r, null, !0), authOptions: n, signKey: !1 }).then(function (t) {
            return e._decode(t).id;
          });
        }, on: function on(e, t) {} }), e.Insight.JobQuery = function (e, t) {
        if (!e) throw new Error("Please provide the job id.");this.id = e, this.className = t, this._skip = 0, this._limit = 100;
      }, r.extend(e.Insight.JobQuery.prototype, { skip: function skip(e) {
          return this._skip = e, this;
        }, limit: function limit(e) {
          return this._limit = e, this;
        }, find: function find(t) {
          var n = { skip: this._skip, limit: this._limit };return s({ path: "/bigquery/jobs/" + this.id, method: "GET", query: n, authOptions: t, signKey: !1 }).then(function (t) {
            return t.error ? e.Promise.reject(new i(t.code, t.error)) : e.Promise.resolve(t);
          });
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(59),
        o = n(1),
        s = n(3),
        a = s.inherits,
        u = n(2),
        c = u.request;e.exports = function (e) {
      e.LiveQuery = a(i, { constructor: function constructor(e, t) {
          i.apply(this), this.id = e, this._client = t, this._client.register(this), t.on("message", this._dispatch.bind(this));
        }, _dispatch: function _dispatch(t) {
          var n = this;t.forEach(function (t) {
            var i = t.op,
                o = t.object,
                s = t.query_id,
                a = t.updatedKeys;if (s === n.id) {
              var u = e.parseJSON(r.extend({ __type: "_File" === o.className ? "File" : "Object" }, o));a ? n.emit(i, u, a) : n.emit(i, u);
            }
          });
        }, unsubscribe: function unsubscribe() {
          return this._client.deregister(this), c({ method: "POST", path: "/LiveQuery/unsubscribe", data: { id: this._client.id, query_id: this.id } });
        } }, { init: function init(t) {
          var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              r = n.subscriptionId,
              i = void 0 === r ? e._getSubscriptionId() : r;if (!e._config.realtime) throw new Error("LiveQuery not supported. Please use the LiveQuery bundle. https://url.leanapp.cn/enable-live-query");if (!(t instanceof e.Query)) throw new TypeError("LiveQuery must be inited with a Query");var s = t.toJSON(),
              a = s.where,
              u = s.keys,
              l = s.returnACL;return o.resolve(i).then(function (n) {
            return c({ method: "POST", path: "/LiveQuery/subscribe", data: { query: { where: a, keys: u, returnACL: l, className: t.className }, id: n } }).then(function (t) {
              var r = t.query_id;return e._config.realtime.createLiveQueryClient(n).then(function (t) {
                return new e.LiveQuery(r, t);
              });
            });
          });
        } });
    };
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      return e && e[t] ? o.isFunction(e[t]) ? e[t]() : e[t] : null;
    }var i = function () {
      function e(e, t) {
        var n = [],
            r = !0,
            i = !1,
            o = void 0;try {
          for (var s, a = e[Symbol.iterator](); !(r = (s = a.next()).done) && (n.push(s.value), !t || n.length !== t); r = !0) {}
        } catch (e) {
          i = !0, o = e;
        } finally {
          try {
            !r && a.return && a.return();
          } finally {
            if (i) throw o;
          }
        }return n;
      }return function (t, n) {
        if (Array.isArray(t)) return t;if (Symbol.iterator in Object(t)) return e(t, n);throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }(),
        o = n(0),
        s = n(4),
        a = n(2),
        u = a._request,
        c = n(3),
        l = c.isNullOrUndefined,
        h = c.ensureArray,
        f = c.transformFetchOptions,
        d = c.setValue,
        p = c.findValue,
        _ = ["objectId", "createdAt", "updatedAt"],
        v = function v(e) {
      if (-1 !== _.indexOf(e)) throw new Error("key[" + e + "] is reserved");
    },
        y = function y(e) {
      var t = o.find(e, function (e) {
        return e instanceof Error;
      });if (!t) return e;var n = new s(t.code, t.message);throw n.results = e, n;
    };e.exports = function (e) {
      e.Object = function (t, n) {
        if (o.isString(t)) return e.Object._create.apply(this, arguments);t = t || {}, n && n.parse && (t = this.parse(t), t = this._mergeMagicFields(t));var i = r(this, "defaults");i && (t = o.extend({}, i, t)), n && n.collection && (this.collection = n.collection), this._serverData = {}, this._opSetQueue = [{}], this._flags = {}, this.attributes = {}, this._hashedJSON = {}, this._escapedAttributes = {}, this.cid = o.uniqueId("c"), this.changed = {}, this._silent = {}, this._pending = {}, this.set(t, { silent: !0 }), this.changed = {}, this._silent = {}, this._pending = {}, this._hasData = !0, this._previousAttributes = o.clone(this.attributes), this.initialize.apply(this, arguments);
      }, e.Object.saveAll = function (t, n) {
        return e.Object._deepSaveAsync(t, null, n);
      }, e.Object.fetchAll = function (t, n) {
        return e.Promise.resolve().then(function () {
          return u("batch", null, null, "POST", { requests: o.map(t, function (e) {
              if (!e.className) throw new Error("object must have className to fetch");if (!e.id) throw new Error("object must have id to fetch");if (e.dirty()) throw new Error("object is modified but not saved");return { method: "GET", path: "/1.1/classes/" + e.className + "/" + e.id };
            }) }, n);
        }).then(function (e) {
          var n = o.map(t, function (t, n) {
            return e[n].success ? (t._finishFetch(t.parse(e[n].success)), t) : null === e[n].success ? new s(s.OBJECT_NOT_FOUND, "Object not found.") : new s(e[n].error.code, e[n].error.error);
          });return y(n);
        });
      }, o.extend(e.Object.prototype, e.Events, { _fetchWhenSave: !1, initialize: function initialize() {}, fetchWhenSave: function fetchWhenSave(e) {
          if (console.warn("AV.Object#fetchWhenSave is deprecated, use AV.Object#save with options.fetchWhenSave instead."), !o.isBoolean(e)) throw new Error("Expect boolean value for fetchWhenSave");this._fetchWhenSave = e;
        }, getObjectId: function getObjectId() {
          return this.id;
        }, getCreatedAt: function getCreatedAt() {
          return this.createdAt || this.get("createdAt");
        }, getUpdatedAt: function getUpdatedAt() {
          return this.updatedAt || this.get("updatedAt");
        }, toJSON: function toJSON(e, t) {
          var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];return this._toFullJSON(n, !1);
        }, toFullJSON: function toFullJSON() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];return this._toFullJSON(e);
        }, _toFullJSON: function _toFullJSON(t) {
          var n = this,
              r = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
              i = o.clone(this.attributes);if (o.isArray(t)) var s = t.concat(this);return e._objectEach(i, function (t, n) {
            i[n] = e._encode(t, s, void 0, r);
          }), e._objectEach(this._operations, function (e, t) {
            i[t] = e;
          }), o.has(this, "id") && (i.objectId = this.id), o(["createdAt", "updatedAt"]).each(function (e) {
            if (o.has(n, e)) {
              var t = n[e];i[e] = o.isDate(t) ? t.toJSON() : t;
            }
          }), r && (i.__type = "Object", o.isArray(t) && t.length && (i.__type = "Pointer"), i.className = this.className), i;
        }, _refreshCache: function _refreshCache() {
          var t = this;t._refreshingCache || (t._refreshingCache = !0, e._objectEach(this.attributes, function (n, r) {
            n instanceof e.Object ? n._refreshCache() : o.isObject(n) && t._resetCacheForKey(r) && t.set(r, new e.Op.Set(n), { silent: !0 });
          }), delete t._refreshingCache);
        }, dirty: function dirty(e) {
          return this._refreshCache(), this._dirty();
        }, _dirty: function _dirty(e) {
          var t = o.last(this._opSetQueue);return e ? !!t[e] : !this.id || o.keys(t).length > 0;
        }, _toPointer: function _toPointer() {
          return { __type: "Pointer", className: this.className, objectId: this.id };
        }, get: function get(e) {
          switch (e) {case "objectId":
              return this.id;case "createdAt":case "updatedAt":
              return this[e];default:
              return this.attributes[e];}
        }, relation: function relation(t) {
          var n = this.get(t);if (n) {
            if (!(n instanceof e.Relation)) throw new Error("Called relation() on non-relation field " + t);return n._ensureParentAndKey(this, t), n;
          }return new e.Relation(this, t);
        }, escape: function escape(e) {
          var t = this._escapedAttributes[e];if (t) return t;var n,
              r = this.attributes[e];return n = l(r) ? "" : o.escape(r.toString()), this._escapedAttributes[e] = n, n;
        }, has: function has(e) {
          return !l(this.attributes[e]);
        }, _mergeMagicFields: function _mergeMagicFields(t) {
          var n = this,
              r = ["objectId", "createdAt", "updatedAt"];return e._arrayEach(r, function (r) {
            t[r] && ("objectId" === r ? n.id = t[r] : "createdAt" !== r && "updatedAt" !== r || o.isDate(t[r]) ? n[r] = t[r] : n[r] = e._parseDate(t[r]), delete t[r]);
          }), t;
        }, _startSave: function _startSave() {
          this._opSetQueue.push({});
        }, _cancelSave: function _cancelSave() {
          var t = o.first(this._opSetQueue);this._opSetQueue = o.rest(this._opSetQueue);var n = o.first(this._opSetQueue);e._objectEach(t, function (e, r) {
            var i = t[r],
                o = n[r];i && o ? n[r] = o._mergeWithPrevious(i) : i && (n[r] = i);
          }), this._saving = this._saving - 1;
        }, _finishSave: function _finishSave(t) {
          var n = {};e._traverse(this.attributes, function (t) {
            t instanceof e.Object && t.id && t._hasData && (n[t.id] = t);
          });var r = o.first(this._opSetQueue);this._opSetQueue = o.rest(this._opSetQueue), this._applyOpSet(r, this._serverData), this._mergeMagicFields(t);var i = this;e._objectEach(t, function (t, r) {
            i._serverData[r] = e._decode(t, r);var o = e._traverse(i._serverData[r], function (t) {
              if (t instanceof e.Object && n[t.id]) return n[t.id];
            });o && (i._serverData[r] = o);
          }), this._rebuildAllEstimatedData(), this._saving = this._saving - 1;
        }, _finishFetch: function _finishFetch(t, n) {
          this._opSetQueue = [{}], this._mergeMagicFields(t);var r = this;e._objectEach(t, function (t, n) {
            r._serverData[n] = e._decode(t, n);
          }), this._rebuildAllEstimatedData(), this._refreshCache(), this._opSetQueue = [{}], this._hasData = n;
        }, _applyOpSet: function _applyOpSet(t, n) {
          var r = this;e._objectEach(t, function (t, o) {
            var s = p(n, o),
                a = i(s, 3),
                u = a[0],
                c = a[1],
                l = a[2];d(n, o, t._estimate(u, r, o)), c && c[l] === e.Op._UNSET && delete c[l];
          });
        }, _resetCacheForKey: function _resetCacheForKey(t) {
          var n = this.attributes[t];if (o.isObject(n) && !(n instanceof e.Object) && !(n instanceof e.File)) {
            n = n.toJSON ? n.toJSON() : n;var r = JSON.stringify(n);if (this._hashedJSON[t] !== r) {
              var i = !!this._hashedJSON[t];return this._hashedJSON[t] = r, i;
            }
          }return !1;
        }, _rebuildEstimatedDataForKey: function _rebuildEstimatedDataForKey(t) {
          var n = this;delete this.attributes[t], this._serverData[t] && (this.attributes[t] = this._serverData[t]), e._arrayEach(this._opSetQueue, function (r) {
            var o = r[t];if (o) {
              var s = p(n.attributes, t),
                  a = i(s, 3),
                  u = a[0],
                  c = a[1],
                  l = a[2];d(n.attributes, t, o._estimate(u, n, t)), c && c[l] === e.Op._UNSET ? delete c[l] : n._resetCacheForKey(t);
            }
          });
        }, _rebuildAllEstimatedData: function _rebuildAllEstimatedData() {
          var t = this,
              n = o.clone(this.attributes);this.attributes = o.clone(this._serverData), e._arrayEach(this._opSetQueue, function (n) {
            t._applyOpSet(n, t.attributes), e._objectEach(n, function (e, n) {
              t._resetCacheForKey(n);
            });
          }), e._objectEach(n, function (e, n) {
            t.attributes[n] !== e && t.trigger("change:" + n, t, t.attributes[n], {});
          }), e._objectEach(this.attributes, function (e, r) {
            o.has(n, r) || t.trigger("change:" + r, t, e, {});
          });
        }, set: function set(t, n, r) {
          var i;if (o.isObject(t) || l(t) ? (i = o.mapObject(t, function (t, n) {
            return v(n), e._decode(t, n);
          }), r = n) : (i = {}, v(t), i[t] = e._decode(n, t)), r = r || {}, !i) return this;i instanceof e.Object && (i = i.attributes), r.unset && e._objectEach(i, function (t, n) {
            i[n] = new e.Op.Unset();
          });var s = o.clone(i),
              a = this;e._objectEach(s, function (t, n) {
            t instanceof e.Op && (s[n] = t._estimate(a.attributes[n], a, n), s[n] === e.Op._UNSET && delete s[n]);
          }), this._validate(i, r), r.changes = {};var u = this._escapedAttributes;this._previousAttributes;return e._arrayEach(o.keys(i), function (t) {
            var n = i[t];n instanceof e.Relation && (n.parent = a), n instanceof e.Op || (n = new e.Op.Set(n));var s = !0;n instanceof e.Op.Set && o.isEqual(a.attributes[t], n.value) && (s = !1), s && (delete u[t], r.silent ? a._silent[t] = !0 : r.changes[t] = !0);var c = o.last(a._opSetQueue);c[t] = n._mergeWithPrevious(c[t]), a._rebuildEstimatedDataForKey(t), s ? (a.changed[t] = a.attributes[t], r.silent || (a._pending[t] = !0)) : (delete a.changed[t], delete a._pending[t]);
          }), r.silent || this.change(r), this;
        }, unset: function unset(e, t) {
          return t = t || {}, t.unset = !0, this.set(e, null, t);
        }, increment: function increment(t, n) {
          return (o.isUndefined(n) || o.isNull(n)) && (n = 1), this.set(t, new e.Op.Increment(n));
        }, add: function add(t, n) {
          return this.set(t, new e.Op.Add(h(n)));
        }, addUnique: function addUnique(t, n) {
          return this.set(t, new e.Op.AddUnique(h(n)));
        }, remove: function remove(t, n) {
          return this.set(t, new e.Op.Remove(h(n)));
        }, bitAnd: function bitAnd(t, n) {
          return this.set(t, new e.Op.BitAnd(n));
        }, bitOr: function bitOr(t, n) {
          return this.set(t, new e.Op.BitOr(n));
        }, bitXor: function bitXor(t, n) {
          return this.set(t, new e.Op.BitXor(n));
        }, op: function op(e) {
          return o.last(this._opSetQueue)[e];
        }, clear: function clear(e) {
          e = e || {}, e.unset = !0;var t = o.extend(this.attributes, this._operations);return this.set(t, e);
        }, _getSaveJSON: function _getSaveJSON() {
          var t = o.clone(o.first(this._opSetQueue));return e._objectEach(t, function (e, n) {
            t[n] = e.toJSON();
          }), t;
        }, _canBeSerialized: function _canBeSerialized() {
          return e.Object._canBeSerializedAsValue(this.attributes);
        }, fetch: function fetch(e, t) {
          var n = this;return u("classes", this.className, this.id, "GET", f(e), t).then(function (e) {
            return n._finishFetch(n.parse(e), !0), n;
          });
        }, save: function save(t, n, r) {
          var i, s, a;o.isObject(t) || l(t) ? (i = t, a = n) : (i = {}, i[t] = n, a = r), a = o.clone(a) || {}, a.wait && (s = o.clone(this.attributes));var c = o.clone(a) || {};c.wait && (c.silent = !0), i && this.set(i, c);var h = this,
              f = [],
              d = [];return e.Object._findUnsavedChildren(h, f, d), f.length + d.length > 1 ? e.Object._deepSaveAsync(this, h, a) : (this._startSave(), this._saving = (this._saving || 0) + 1, this._allPreviousSaves = this._allPreviousSaves || e.Promise.resolve(), this._allPreviousSaves = this._allPreviousSaves.catch(function (e) {}).then(function () {
            var e = h.id ? "PUT" : "POST",
                t = h._getSaveJSON(),
                n = {};if ((h._fetchWhenSave || a.fetchWhenSave) && (n.new = "true"), a.query) {
              var r;if ("function" == typeof a.query.toJSON && (r = a.query.toJSON()) && (n.where = r.where), !n.where) {
                throw new Error("options.query is not an AV.Query");
              }
            }o.extend(t, h._flags);var l = "classes",
                f = h.className;"_User" !== h.className || h.id || (l = "users", f = null);var d = a._makeRequest || u,
                p = d(l, f, h.id, e, t, a, n);return p = p.then(function (e) {
              var t = h.parse(e);return a.wait && (t = o.extend(i || {}, t)), h._finishSave(t), a.wait && h.set(s, c), h;
            }, function (e) {
              throw h._cancelSave(), e;
            });
          }), this._allPreviousSaves);
        }, destroy: function destroy(e) {
          e = e || {};var t = this,
              n = function n() {
            t.trigger("destroy", t, t.collection, e);
          };return this.id ? (e.wait || n(), u("classes", this.className, this.id, "DELETE", this._flags, e).then(function () {
            return e.wait && n(), t;
          })) : n();
        }, parse: function parse(t) {
          var n = o.clone(t);return o(["createdAt", "updatedAt"]).each(function (t) {
            n[t] && (n[t] = e._parseDate(n[t]));
          }), n.createdAt && !n.updatedAt && (n.updatedAt = n.createdAt), n;
        }, clone: function clone() {
          return new this.constructor(this.attributes);
        }, isNew: function isNew() {
          return !this.id;
        }, change: function change(t) {
          t = t || {};var n = this._changing;this._changing = !0;var r = this;e._objectEach(this._silent, function (e) {
            r._pending[e] = !0;
          });var i = o.extend({}, t.changes, this._silent);if (this._silent = {}, e._objectEach(i, function (e, n) {
            r.trigger("change:" + n, r, r.get(n), t);
          }), n) return this;for (var s = function s(e, t) {
            r._pending[t] || r._silent[t] || delete r.changed[t];
          }; !o.isEmpty(this._pending);) {
            this._pending = {}, this.trigger("change", this, t), e._objectEach(this.changed, s), r._previousAttributes = o.clone(this.attributes);
          }return this._changing = !1, this;
        }, hasChanged: function hasChanged(e) {
          return arguments.length ? this.changed && o.has(this.changed, e) : !o.isEmpty(this.changed);
        }, changedAttributes: function changedAttributes(t) {
          if (!t) return !!this.hasChanged() && o.clone(this.changed);var n = {},
              r = this._previousAttributes;return e._objectEach(t, function (e, t) {
            o.isEqual(r[t], e) || (n[t] = e);
          }), n;
        }, previous: function previous(e) {
          return arguments.length && this._previousAttributes ? this._previousAttributes[e] : null;
        }, previousAttributes: function previousAttributes() {
          return o.clone(this._previousAttributes);
        }, isValid: function isValid() {
          try {
            this.validate(this.attributes);
          } catch (e) {
            return !1;
          }return !0;
        }, validate: function validate(t) {
          if (o.has(t, "ACL") && !(t.ACL instanceof e.ACL)) throw new s(s.OTHER_CAUSE, "ACL must be a AV.ACL.");
        }, _validate: function _validate(e, t) {
          !t.silent && this.validate && (e = o.extend({}, this.attributes, e), this.validate(e));
        }, getACL: function getACL() {
          return this.get("ACL");
        }, setACL: function setACL(e, t) {
          return this.set("ACL", e, t);
        }, disableBeforeHook: function disableBeforeHook() {
          this.ignoreHook("beforeSave"), this.ignoreHook("beforeUpdate"), this.ignoreHook("beforeDelete");
        }, disableAfterHook: function disableAfterHook() {
          this.ignoreHook("afterSave"), this.ignoreHook("afterUpdate"), this.ignoreHook("afterDelete");
        }, ignoreHook: function ignoreHook(t) {
          o.contains(["beforeSave", "afterSave", "beforeUpdate", "afterUpdate", "beforeDelete", "afterDelete"], t) || console.trace("Unsupported hookName: " + t), e.hookKey || console.trace("ignoreHook required hookKey"), this._flags.__ignore_hooks || (this._flags.__ignore_hooks = []), this._flags.__ignore_hooks.push(t);
        } }), e.Object.createWithoutData = function (t, n, r) {
        var i = new e.Object(t);return i.id = n, i._hasData = r, i;
      }, e.Object.destroyAll = function (t) {
        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (!t || 0 === t.length) return e.Promise.resolve();var r = o.groupBy(t, function (e) {
          return JSON.stringify({ className: e.className, flags: e._flags });
        }),
            i = { requests: o.map(r, function (e) {
            var t = o.map(e, "id").join(",");return { method: "DELETE", path: "/1.1/classes/" + e[0].className + "/" + t, body: e[0]._flags };
          }) };return u("batch", null, null, "POST", i, n).then(function (e) {
          var t = o.find(e, function (e) {
            return !e.success;
          });if (t) throw new s(t.error.code, t.error.error);
        });
      }, e.Object._getSubclass = function (t) {
        if (!o.isString(t)) throw new Error("AV.Object._getSubclass requires a string argument.");var n = e.Object._classMap[t];return n || (n = e.Object.extend(t), e.Object._classMap[t] = n), n;
      }, e.Object._create = function (t, n, r) {
        return new (e.Object._getSubclass(t))(n, r);
      }, e.Object._classMap = {}, e.Object._extend = e._extend, e.Object.new = function (t, n) {
        return new e.Object(t, n);
      }, e.Object.extend = function (t, n, r) {
        if (!o.isString(t)) {
          if (t && o.has(t, "className")) return e.Object.extend(t.className, t, n);throw new Error("AV.Object.extend's first argument should be the className.");
        }"User" === t && (t = "_User");var i = null;if (o.has(e.Object._classMap, t)) {
          var s = e.Object._classMap[t];if (!n && !r) return s;i = s._extend(n, r);
        } else n = n || {}, n._className = t, i = this._extend(n, r);return i.extend = function (n) {
          if (o.isString(n) || n && o.has(n, "className")) return e.Object.extend.apply(i, arguments);var r = [t].concat(o.toArray(arguments));return e.Object.extend.apply(i, r);
        }, Object.defineProperty(i, "query", Object.getOwnPropertyDescriptor(e.Object, "query")), i.new = function (e, t) {
          return new i(e, t);
        }, e.Object._classMap[t] = i, i;
      }, Object.defineProperty(e.Object.prototype, "className", { get: function get() {
          var e = this._className || this.constructor._LCClassName || this.constructor.name;return "User" === e ? "_User" : e;
        } }), e.Object.register = function (t, n) {
        if (!(t.prototype instanceof e.Object)) throw new Error("registered class is not a subclass of AV.Object");var r = n || t.name;if (!r.length) throw new Error("registered class must be named");n && (t._LCClassName = n), e.Object._classMap[r] = t;
      }, Object.defineProperty(e.Object, "query", { get: function get() {
          return new e.Query(this.prototype.className);
        } }), e.Object._findUnsavedChildren = function (t, n, r) {
        e._traverse(t, function (t) {
          return t instanceof e.Object ? void (t._dirty() && n.push(t)) : t instanceof e.File ? void (t.url() || t.id || r.push(t)) : void 0;
        });
      }, e.Object._canBeSerializedAsValue = function (t) {
        var n = !0;return t instanceof e.Object || t instanceof e.File ? n = !!t.id : o.isArray(t) ? e._arrayEach(t, function (t) {
          e.Object._canBeSerializedAsValue(t) || (n = !1);
        }) : o.isObject(t) && e._objectEach(t, function (t) {
          e.Object._canBeSerializedAsValue(t) || (n = !1);
        }), n;
      }, e.Object._deepSaveAsync = function (t, n, r) {
        var i = [],
            a = [];e.Object._findUnsavedChildren(t, i, a);var c = e.Promise.resolve();o.each(a, function (e) {
          c = c.then(function () {
            return e.save();
          });
        });var l = o.uniq(i),
            h = o.uniq(l);return c.then(function () {
          return e.Promise._continueWhile(function () {
            return h.length > 0;
          }, function () {
            var t = [],
                n = [];if (e._arrayEach(h, function (e) {
              if (t.length > 20) return void n.push(e);e._canBeSerialized() ? t.push(e) : n.push(e);
            }), h = n, 0 === t.length) return e.Promise.reject(new s(s.OTHER_CAUSE, "Tried to save a batch with a cycle."));var i = e.Promise.resolve(o.map(t, function (t) {
              return t._allPreviousSaves || e.Promise.resolve();
            })),
                a = i.then(function () {
              return u("batch", null, null, "POST", { requests: o.map(t, function (e) {
                  var t = e.id ? "PUT" : "POST",
                      n = e._getSaveJSON();o.extend(n, e._flags);var r = e.className,
                      i = "/classes/" + r;"_User" !== e.className || e.id || (i = "/users");var i = "/1.1" + i;return e.id && (i = i + "/" + e.id), e._startSave(), { method: t, path: i, body: n };
                }) }, r).then(function (e) {
                var n = o.map(t, function (t, n) {
                  return e[n].success ? (t._finishSave(t.parse(e[n].success)), t) : (t._cancelSave(), new s(e[n].error.code, e[n].error.error));
                });return y(n);
              });
            });return e._arrayEach(t, function (e) {
              e._allPreviousSaves = a;
            }), a;
          });
        }).then(function () {
          return t;
        });
      };
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0);e.exports = function (e) {
      e.Op = function () {
        this._initialize.apply(this, arguments);
      }, r.extend(e.Op.prototype, { _initialize: function _initialize() {} }), r.extend(e.Op, { _extend: e._extend, _opDecoderMap: {}, _registerDecoder: function _registerDecoder(t, n) {
          e.Op._opDecoderMap[t] = n;
        }, _decode: function _decode(t) {
          var n = e.Op._opDecoderMap[t.__op];return n ? n(t) : void 0;
        } }), e.Op._registerDecoder("Batch", function (t) {
        var n = null;return e._arrayEach(t.ops, function (t) {
          t = e.Op._decode(t), n = t._mergeWithPrevious(n);
        }), n;
      }), e.Op.Set = e.Op._extend({ _initialize: function _initialize(e) {
          this._value = e;
        }, value: function value() {
          return this._value;
        }, toJSON: function toJSON() {
          return e._encode(this.value());
        }, _mergeWithPrevious: function _mergeWithPrevious(e) {
          return this;
        }, _estimate: function _estimate(e) {
          return this.value();
        } }), e.Op._UNSET = {}, e.Op.Unset = e.Op._extend({ toJSON: function toJSON() {
          return { __op: "Delete" };
        }, _mergeWithPrevious: function _mergeWithPrevious(e) {
          return this;
        }, _estimate: function _estimate(t) {
          return e.Op._UNSET;
        } }), e.Op._registerDecoder("Delete", function (t) {
        return new e.Op.Unset();
      }), e.Op.Increment = e.Op._extend({ _initialize: function _initialize(e) {
          this._amount = e;
        }, amount: function amount() {
          return this._amount;
        }, toJSON: function toJSON() {
          return { __op: "Increment", amount: this._amount };
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) return new e.Op.Set(this.amount());if (t instanceof e.Op.Set) return new e.Op.Set(t.value() + this.amount());if (t instanceof e.Op.Increment) return new e.Op.Increment(this.amount() + t.amount());throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(e) {
          return e ? e + this.amount() : this.amount();
        } }), e.Op._registerDecoder("Increment", function (t) {
        return new e.Op.Increment(t.amount);
      }), e.Op.BitAnd = e.Op._extend({ _initialize: function _initialize(e) {
          this._value = e;
        }, value: function value() {
          return this._value;
        }, toJSON: function toJSON() {
          return { __op: "BitAnd", value: this.value() };
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) return new e.Op.Set(0);if (t instanceof e.Op.Set) return new e.Op.Set(t.value() & this.value());throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(e) {
          return e & this.value();
        } }), e.Op._registerDecoder("BitAnd", function (t) {
        return new e.Op.BitAnd(t.value);
      }), e.Op.BitOr = e.Op._extend({ _initialize: function _initialize(e) {
          this._value = e;
        }, value: function value() {
          return this._value;
        }, toJSON: function toJSON() {
          return { __op: "BitOr", value: this.value() };
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) return new e.Op.Set(this.value());if (t instanceof e.Op.Set) return new e.Op.Set(t.value() | this.value());throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(e) {
          return e | this.value();
        } }), e.Op._registerDecoder("BitOr", function (t) {
        return new e.Op.BitOr(t.value);
      }), e.Op.BitXor = e.Op._extend({ _initialize: function _initialize(e) {
          this._value = e;
        }, value: function value() {
          return this._value;
        }, toJSON: function toJSON() {
          return { __op: "BitXor", value: this.value() };
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) return new e.Op.Set(this.value());if (t instanceof e.Op.Set) return new e.Op.Set(t.value() ^ this.value());throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(e) {
          return e ^ this.value();
        } }), e.Op._registerDecoder("BitXor", function (t) {
        return new e.Op.BitXor(t.value);
      }), e.Op.Add = e.Op._extend({ _initialize: function _initialize(e) {
          this._objects = e;
        }, objects: function objects() {
          return this._objects;
        }, toJSON: function toJSON() {
          return { __op: "Add", objects: e._encode(this.objects()) };
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) return new e.Op.Set(this.objects());if (t instanceof e.Op.Set) return new e.Op.Set(this._estimate(t.value()));if (t instanceof e.Op.Add) return new e.Op.Add(t.objects().concat(this.objects()));throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(e) {
          return e ? e.concat(this.objects()) : r.clone(this.objects());
        } }), e.Op._registerDecoder("Add", function (t) {
        return new e.Op.Add(e._decode(t.objects));
      }), e.Op.AddUnique = e.Op._extend({ _initialize: function _initialize(e) {
          this._objects = r.uniq(e);
        }, objects: function objects() {
          return this._objects;
        }, toJSON: function toJSON() {
          return { __op: "AddUnique", objects: e._encode(this.objects()) };
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) return new e.Op.Set(this.objects());if (t instanceof e.Op.Set) return new e.Op.Set(this._estimate(t.value()));if (t instanceof e.Op.AddUnique) return new e.Op.AddUnique(this._estimate(t.objects()));throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(t) {
          if (t) {
            var n = r.clone(t);return e._arrayEach(this.objects(), function (t) {
              if (t instanceof e.Object && t.id) {
                var i = r.find(n, function (n) {
                  return n instanceof e.Object && n.id === t.id;
                });if (i) {
                  var o = r.indexOf(n, i);n[o] = t;
                } else n.push(t);
              } else r.contains(n, t) || n.push(t);
            }), n;
          }return r.clone(this.objects());
        } }), e.Op._registerDecoder("AddUnique", function (t) {
        return new e.Op.AddUnique(e._decode(t.objects));
      }), e.Op.Remove = e.Op._extend({ _initialize: function _initialize(e) {
          this._objects = r.uniq(e);
        }, objects: function objects() {
          return this._objects;
        }, toJSON: function toJSON() {
          return { __op: "Remove", objects: e._encode(this.objects()) };
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) return t;if (t instanceof e.Op.Set) return new e.Op.Set(this._estimate(t.value()));if (t instanceof e.Op.Remove) return new e.Op.Remove(r.union(t.objects(), this.objects()));throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(t) {
          if (t) {
            var n = r.difference(t, this.objects());return e._arrayEach(this.objects(), function (t) {
              t instanceof e.Object && t.id && (n = r.reject(n, function (n) {
                return n instanceof e.Object && n.id === t.id;
              }));
            }), n;
          }return [];
        } }), e.Op._registerDecoder("Remove", function (t) {
        return new e.Op.Remove(e._decode(t.objects));
      }), e.Op.Relation = e.Op._extend({ _initialize: function _initialize(t, n) {
          this._targetClassName = null;var i = this,
              o = function o(t) {
            if (t instanceof e.Object) {
              if (!t.id) throw new Error("You can't add an unsaved AV.Object to a relation.");if (i._targetClassName || (i._targetClassName = t.className), i._targetClassName !== t.className) throw new Error("Tried to create a AV.Relation with 2 different types: " + i._targetClassName + " and " + t.className + ".");return t.id;
            }return t;
          };this.relationsToAdd = r.uniq(r.map(t, o)), this.relationsToRemove = r.uniq(r.map(n, o));
        }, added: function added() {
          var t = this;return r.map(this.relationsToAdd, function (n) {
            var r = e.Object._create(t._targetClassName);return r.id = n, r;
          });
        }, removed: function removed() {
          var t = this;return r.map(this.relationsToRemove, function (n) {
            var r = e.Object._create(t._targetClassName);return r.id = n, r;
          });
        }, toJSON: function toJSON() {
          var e = null,
              t = null,
              n = this,
              i = function i(e) {
            return { __type: "Pointer", className: n._targetClassName, objectId: e };
          },
              o = null;return this.relationsToAdd.length > 0 && (o = r.map(this.relationsToAdd, i), e = { __op: "AddRelation", objects: o }), this.relationsToRemove.length > 0 && (o = r.map(this.relationsToRemove, i), t = { __op: "RemoveRelation", objects: o }), e && t ? { __op: "Batch", ops: [e, t] } : e || t || {};
        }, _mergeWithPrevious: function _mergeWithPrevious(t) {
          if (t) {
            if (t instanceof e.Op.Unset) throw new Error("You can't modify a relation after deleting it.");if (t instanceof e.Op.Relation) {
              if (t._targetClassName && t._targetClassName !== this._targetClassName) throw new Error("Related object must be of class " + t._targetClassName + ", but " + this._targetClassName + " was passed in.");var n = r.union(r.difference(t.relationsToAdd, this.relationsToRemove), this.relationsToAdd),
                  i = r.union(r.difference(t.relationsToRemove, this.relationsToAdd), this.relationsToRemove),
                  o = new e.Op.Relation(n, i);return o._targetClassName = this._targetClassName, o;
            }throw new Error("Op is invalid after previous op.");
          }return this;
        }, _estimate: function _estimate(t, n, r) {
          if (t) {
            if (t instanceof e.Relation) {
              if (this._targetClassName) if (t.targetClassName) {
                if (t.targetClassName !== this._targetClassName) throw new Error("Related object must be a " + t.targetClassName + ", but a " + this._targetClassName + " was passed in.");
              } else t.targetClassName = this._targetClassName;return t;
            }throw new Error("Op is invalid after previous op.");
          }new e.Relation(n, r).targetClassName = this._targetClassName;
        } }), e.Op._registerDecoder("AddRelation", function (t) {
        return new e.Op.Relation(e._decode(t.objects), []);
      }), e.Op._registerDecoder("RemoveRelation", function (t) {
        return new e.Op.Relation([], e._decode(t.objects));
      });
    };
  }, function (e, t, n) {
    "use strict";
    n(42);
  }, function (e, t, n) {
    "use strict";
    var r = n(2).request;e.exports = function (e) {
      e.Installation = e.Object.extend("_Installation"), e.Push = e.Push || {}, e.Push.send = function (e, t) {
        if (e.where && (e.where = e.where.toJSON().where), e.where && e.cql) throw new Error("Both where and cql can't be set");if (e.push_time && (e.push_time = e.push_time.toJSON()), e.expiration_time && (e.expiration_time = e.expiration_time.toJSON()), e.expiration_time && e.expiration_time_interval) throw new Error("Both expiration_time and expiration_time_interval can't be set");return r({ service: "push", method: "POST", path: "/push", data: e, authOptions: t });
      };
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(6)("leancloud:query"),
        o = n(1),
        s = n(4),
        a = n(2),
        u = a._request,
        c = a.request,
        l = n(3),
        h = l.ensureArray,
        f = l.transformFetchOptions,
        d = function d(e, t) {
      if (void 0 === e) throw new Error(t);
    };e.exports = function (e) {
      e.Query = function (t) {
        r.isString(t) && (t = e.Object._getSubclass(t)), this.objectClass = t, this.className = t.prototype.className, this._where = {}, this._include = [], this._select = [], this._limit = -1, this._skip = 0, this._extraOptions = {};
      }, e.Query.or = function () {
        var t = r.toArray(arguments),
            n = null;e._arrayEach(t, function (e) {
          if (r.isNull(n) && (n = e.className), n !== e.className) throw new Error("All queries must be for the same class");
        });var i = new e.Query(n);return i._orQuery(t), i;
      }, e.Query.and = function () {
        var t = r.toArray(arguments),
            n = null;e._arrayEach(t, function (e) {
          if (r.isNull(n) && (n = e.className), n !== e.className) throw new Error("All queries must be for the same class");
        });var i = new e.Query(n);return i._andQuery(t), i;
      }, e.Query.doCloudQuery = function (t, n, i) {
        var o = { cql: t };return r.isArray(n) ? o.pvalues = n : i = n, u("cloudQuery", null, null, "GET", o, i).then(function (t) {
          var n = new e.Query(t.className);return { results: r.map(t.results, function (e) {
              var r = n._newObject(t);return r._finishFetch && r._finishFetch(n._processResult(e), !0), r;
            }), count: t.count, className: t.className };
        });
      }, e.Query._extend = e._extend, r.extend(e.Query.prototype, { _processResult: function _processResult(e) {
          return e;
        }, get: function get(e, t) {
          if (!e) {
            throw new s(s.OBJECT_NOT_FOUND, "Object not found.");
          }var n = this._newObject();n.id = e;var i = this.toJSON(),
              o = {};return i.keys && (o.keys = i.keys), i.include && (o.include = i.include), i.includeACL && (o.includeACL = i.includeACL), u("classes", this.className, e, "GET", f(o), t).then(function (e) {
            if (r.isEmpty(e)) throw new s(s.OBJECT_NOT_FOUND, "Object not found.");return n._finishFetch(n.parse(e), !0), n;
          });
        }, toJSON: function toJSON() {
          var t = { where: this._where };return this._include.length > 0 && (t.include = this._include.join(",")), this._select.length > 0 && (t.keys = this._select.join(",")), void 0 !== this._includeACL && (t.returnACL = this._includeACL), this._limit >= 0 && (t.limit = this._limit), this._skip > 0 && (t.skip = this._skip), void 0 !== this._order && (t.order = this._order), e._objectEach(this._extraOptions, function (e, n) {
            t[n] = e;
          }), t;
        }, _newObject: function _newObject(t) {
          return t && t.className ? new e.Object(t.className) : new this.objectClass();
        }, _createRequest: function _createRequest() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.toJSON(),
              t = arguments[1],
              n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "/classes/" + this.className;if (encodeURIComponent(JSON.stringify(e)).length > 2e3) {
            return c({ path: "/batch", method: "POST", data: { requests: [{ method: "GET", path: "/1.1" + n, params: e }] }, authOptions: t }).then(function (e) {
              var t = e[0];if (t.success) return t.success;var n = new Error(t.error.error || "Unknown batch error");throw n.code = t.error.code, n;
            });
          }return c({ method: "GET", path: n, query: e, authOptions: t });
        }, _parseResponse: function _parseResponse(e) {
          var t = this;return r.map(e.results, function (n) {
            var r = t._newObject(e);return r._finishFetch && r._finishFetch(t._processResult(n), !0), r;
          });
        }, find: function find(e) {
          return this._createRequest(void 0, e).then(this._parseResponse.bind(this));
        }, scan: function scan() {
          var e = this,
              t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
              n = t.orderedBy,
              s = t.batchSize,
              a = arguments[1],
              c = this.toJSON();i("scan %O", c), c.order && (console.warn("The order of the query is ignored for Query#scan. Checkout the orderedBy option of Query#scan."), delete c.order), c.skip && (console.warn("The skip option of the query is ignored for Query#scan."), delete c.skip), c.limit && (console.warn("The limit option of the query is ignored for Query#scan."), delete c.limit), n && (c.scan_key = n), s && (c.limit = s);var l = o.resolve([]),
              h = void 0,
              f = !1;return { next: function next() {
              return l = l.then(function (t) {
                return f ? [] : t.length > 1 ? t : h || 0 === t.length ? u("scan/classes", e.className, null, "GET", h ? r.extend({}, c, { cursor: h }) : c, a).then(function (t) {
                  return h = t.cursor, e._parseResponse(t);
                }).then(function (e) {
                  return e.length || (f = !0), t.concat(e);
                }) : (f = !0, t);
              }), l.then(function (e) {
                return e.shift();
              }).then(function (e) {
                return { value: e, done: f };
              });
            } };
        }, destroyAll: function destroyAll(t) {
          return this.find(t).then(function (n) {
            return e.Object.destroyAll(n, t);
          });
        }, count: function count(e) {
          var t = this.toJSON();return t.limit = 0, t.count = 1, this._createRequest(t, e).then(function (e) {
            return e.count;
          });
        }, first: function first(e) {
          var t = this,
              n = this.toJSON();return n.limit = 1, this._createRequest(n, e).then(function (e) {
            return r.map(e.results, function (e) {
              var n = t._newObject();return n._finishFetch && n._finishFetch(t._processResult(e), !0), n;
            })[0];
          });
        }, skip: function skip(e) {
          return d(e, "undefined is not a valid skip value"), this._skip = e, this;
        }, limit: function limit(e) {
          return d(e, "undefined is not a valid limit value"), this._limit = e, this;
        }, equalTo: function equalTo(t, n) {
          return d(t, "undefined is not a valid key"), d(n, "undefined is not a valid value"), this._where[t] = e._encode(n), this;
        }, _addCondition: function _addCondition(t, n, r) {
          return d(t, "undefined is not a valid condition key"), d(n, "undefined is not a valid condition"), d(r, "undefined is not a valid condition value"), this._where[t] || (this._where[t] = {}), this._where[t][n] = e._encode(r), this;
        }, sizeEqualTo: function sizeEqualTo(e, t) {
          this._addCondition(e, "$size", t);
        }, notEqualTo: function notEqualTo(e, t) {
          return this._addCondition(e, "$ne", t), this;
        }, lessThan: function lessThan(e, t) {
          return this._addCondition(e, "$lt", t), this;
        }, greaterThan: function greaterThan(e, t) {
          return this._addCondition(e, "$gt", t), this;
        }, lessThanOrEqualTo: function lessThanOrEqualTo(e, t) {
          return this._addCondition(e, "$lte", t), this;
        }, greaterThanOrEqualTo: function greaterThanOrEqualTo(e, t) {
          return this._addCondition(e, "$gte", t), this;
        }, containedIn: function containedIn(e, t) {
          return this._addCondition(e, "$in", t), this;
        }, notContainedIn: function notContainedIn(e, t) {
          return this._addCondition(e, "$nin", t), this;
        }, containsAll: function containsAll(e, t) {
          return this._addCondition(e, "$all", t), this;
        }, exists: function exists(e) {
          return this._addCondition(e, "$exists", !0), this;
        }, doesNotExist: function doesNotExist(e) {
          return this._addCondition(e, "$exists", !1), this;
        }, matches: function matches(e, t, n) {
          return this._addCondition(e, "$regex", t), n || (n = ""), t.ignoreCase && (n += "i"), t.multiline && (n += "m"), n && n.length && this._addCondition(e, "$options", n), this;
        }, matchesQuery: function matchesQuery(e, t) {
          var n = t.toJSON();return n.className = t.className, this._addCondition(e, "$inQuery", n), this;
        }, doesNotMatchQuery: function doesNotMatchQuery(e, t) {
          var n = t.toJSON();return n.className = t.className, this._addCondition(e, "$notInQuery", n), this;
        }, matchesKeyInQuery: function matchesKeyInQuery(e, t, n) {
          var r = n.toJSON();return r.className = n.className, this._addCondition(e, "$select", { key: t, query: r }), this;
        }, doesNotMatchKeyInQuery: function doesNotMatchKeyInQuery(e, t, n) {
          var r = n.toJSON();return r.className = n.className, this._addCondition(e, "$dontSelect", { key: t, query: r }), this;
        }, _orQuery: function _orQuery(e) {
          var t = r.map(e, function (e) {
            return e.toJSON().where;
          });return this._where.$or = t, this;
        }, _andQuery: function _andQuery(e) {
          var t = r.map(e, function (e) {
            return e.toJSON().where;
          });return this._where.$and = t, this;
        }, _quote: function _quote(e) {
          return "\\Q" + e.replace("\\E", "\\E\\\\E\\Q") + "\\E";
        }, contains: function contains(e, t) {
          return this._addCondition(e, "$regex", this._quote(t)), this;
        }, startsWith: function startsWith(e, t) {
          return this._addCondition(e, "$regex", "^" + this._quote(t)), this;
        }, endsWith: function endsWith(e, t) {
          return this._addCondition(e, "$regex", this._quote(t) + "$"), this;
        }, ascending: function ascending(e) {
          return d(e, "undefined is not a valid key"), this._order = e, this;
        }, addAscending: function addAscending(e) {
          return d(e, "undefined is not a valid key"), this._order ? this._order += "," + e : this._order = e, this;
        }, descending: function descending(e) {
          return d(e, "undefined is not a valid key"), this._order = "-" + e, this;
        }, addDescending: function addDescending(e) {
          return d(e, "undefined is not a valid key"), this._order ? this._order += ",-" + e : this._order = "-" + e, this;
        }, near: function near(t, n) {
          return n instanceof e.GeoPoint || (n = new e.GeoPoint(n)), this._addCondition(t, "$nearSphere", n), this;
        }, withinRadians: function withinRadians(e, t, n) {
          return this.near(e, t), this._addCondition(e, "$maxDistance", n), this;
        }, withinMiles: function withinMiles(e, t, n) {
          return this.withinRadians(e, t, n / 3958.8);
        }, withinKilometers: function withinKilometers(e, t, n) {
          return this.withinRadians(e, t, n / 6371);
        }, withinGeoBox: function withinGeoBox(t, n, r) {
          return n instanceof e.GeoPoint || (n = new e.GeoPoint(n)), r instanceof e.GeoPoint || (r = new e.GeoPoint(r)), this._addCondition(t, "$within", { $box: [n, r] }), this;
        }, include: function include(e) {
          var t = this;return d(e, "undefined is not a valid key"), r(arguments).forEach(function (e) {
            t._include = t._include.concat(h(e));
          }), this;
        }, includeACL: function includeACL() {
          var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];return this._includeACL = e, this;
        }, select: function select(e) {
          var t = this;return d(e, "undefined is not a valid key"), r(arguments).forEach(function (e) {
            t._select = t._select.concat(h(e));
          }), this;
        }, each: function each(t) {
          var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (this._order || this._skip || this._limit >= 0) {
            var i = new Error("Cannot iterate on a query with sort, skip, or limit.");return e.Promise.reject(i);
          }var o = new e.Query(this.objectClass);o._limit = n.batchSize || 100, o._where = r.clone(this._where), o._include = r.clone(this._include), o.ascending("objectId");var s = !1;return e.Promise._continueWhile(function () {
            return !s;
          }, function () {
            return o.find(n).then(function (n) {
              var i = e.Promise.resolve();return r.each(n, function (e) {
                i = i.then(function () {
                  return t(e);
                });
              }), i.then(function () {
                n.length >= o._limit ? o.greaterThan("objectId", n[n.length - 1].id) : s = !0;
              });
            });
          });
        }, subscribe: function subscribe(t) {
          return e.LiveQuery.init(this, t);
        } }), e.FriendShipQuery = e.Query._extend({ _objectClass: e.User, _newObject: function _newObject() {
          return new e.User();
        }, _processResult: function _processResult(e) {
          if (e && e[this._friendshipTag]) {
            var t = e[this._friendshipTag];return "Pointer" === t.__type && "_User" === t.className && (delete t.__type, delete t.className), t;
          }return null;
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0);e.exports = function (e) {
      e.Relation = function (e, t) {
        if (!r.isString(t)) throw new TypeError("key must be a string");this.parent = e, this.key = t, this.targetClassName = null;
      }, e.Relation.reverseQuery = function (t, n, r) {
        var i = new e.Query(t);return i.equalTo(n, r._toPointer()), i;
      }, r.extend(e.Relation.prototype, { _ensureParentAndKey: function _ensureParentAndKey(e, t) {
          if (this.parent = this.parent || e, this.key = this.key || t, this.parent !== e) throw new Error("Internal Error. Relation retrieved from two different Objects.");if (this.key !== t) throw new Error("Internal Error. Relation retrieved from two different keys.");
        }, add: function add(t) {
          r.isArray(t) || (t = [t]);var n = new e.Op.Relation(t, []);this.parent.set(this.key, n), this.targetClassName = n._targetClassName;
        }, remove: function remove(t) {
          r.isArray(t) || (t = [t]);var n = new e.Op.Relation([], t);this.parent.set(this.key, n), this.targetClassName = n._targetClassName;
        }, toJSON: function toJSON() {
          return { __type: "Relation", className: this.targetClassName };
        }, query: function query() {
          var t, n;return this.targetClassName ? (t = e.Object._getSubclass(this.targetClassName), n = new e.Query(t)) : (t = e.Object._getSubclass(this.parent.className), n = new e.Query(t), n._extraOptions.redirectClassNameForKey = this.key), n._addCondition("$relatedTo", "object", this.parent._toPointer()), n._addCondition("$relatedTo", "key", this.key), n;
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(4);e.exports = function (e) {
      e.Role = e.Object.extend("_Role", { constructor: function constructor(t, n) {
          if (r.isString(t) ? (e.Object.prototype.constructor.call(this, null, null), this.setName(t)) : e.Object.prototype.constructor.call(this, t, n), n) {
            if (!(n instanceof e.ACL)) throw new TypeError("acl must be an instance of AV.ACL");this.setACL(n);
          }
        }, getName: function getName() {
          return this.get("name");
        }, setName: function setName(e, t) {
          return this.set("name", e, t);
        }, getUsers: function getUsers() {
          return this.relation("users");
        }, getRoles: function getRoles() {
          return this.relation("roles");
        }, validate: function validate(t, n) {
          if ("name" in t && t.name !== this.getName()) {
            var o = t.name;if (this.id && this.id !== t.objectId) return new i(i.OTHER_CAUSE, "A role's name can only be set before it has been saved.");if (!r.isString(o)) return new i(i.OTHER_CAUSE, "A role's name must be a String.");if (!/^[0-9a-zA-Z\-_ ]+$/.test(o)) return new i(i.OTHER_CAUSE, "A role's name can only contain alphanumeric characters, _, -, and spaces.");
          }return !!e.Object.prototype.validate && e.Object.prototype.validate.call(this, t, n);
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(2)._request;e.exports = function (e) {
      e.SearchSortBuilder = function () {
        this._sortFields = [];
      }, r.extend(e.SearchSortBuilder.prototype, { _addField: function _addField(e, t, n, r) {
          var i = {};return i[e] = { order: t || "asc", mode: n || "avg", missing: "_" + (r || "last") }, this._sortFields.push(i), this;
        }, ascending: function ascending(e, t, n) {
          return this._addField(e, "asc", t, n);
        }, descending: function descending(e, t, n) {
          return this._addField(e, "desc", t, n);
        }, whereNear: function whereNear(e, t, n) {
          n = n || {};var r = {},
              i = { lat: t.latitude, lon: t.longitude },
              o = { order: n.order || "asc", mode: n.mode || "avg", unit: n.unit || "km" };return o[e] = i, r._geo_distance = o, this._sortFields.push(r), this;
        }, build: function build() {
          return JSON.stringify(e._encode(this._sortFields));
        } }), e.SearchQuery = e.Query._extend({ _sid: null, _hits: 0, _queryString: null, _highlights: null, _sortBuilder: null, _createRequest: function _createRequest(e, t) {
          return i("search/select", null, null, "GET", e || this.toJSON(), t);
        }, sid: function sid(e) {
          return this._sid = e, this;
        }, queryString: function queryString(e) {
          return this._queryString = e, this;
        }, highlights: function highlights(e) {
          var t;return t = e && r.isString(e) ? arguments : e, this._highlights = t, this;
        }, sortBy: function sortBy(e) {
          return this._sortBuilder = e, this;
        }, hits: function hits() {
          return this._hits || (this._hits = 0), this._hits;
        }, _processResult: function _processResult(e) {
          return delete e.className, delete e._app_url, delete e._deeplink, e;
        }, hasMore: function hasMore() {
          return !this._hitEnd;
        }, reset: function reset() {
          this._hitEnd = !1, this._sid = null, this._hits = 0;
        }, find: function find() {
          var e = this;return this._createRequest().then(function (t) {
            return t.sid ? (e._oldSid = e._sid, e._sid = t.sid) : (e._sid = null, e._hitEnd = !0), e._hits = t.hits || 0, r.map(t.results, function (n) {
              n.className && (t.className = n.className);var r = e._newObject(t);return r.appURL = n._app_url, r._finishFetch(e._processResult(n), !0), r;
            });
          });
        }, toJSON: function toJSON() {
          var t = e.SearchQuery.__super__.toJSON.call(this);if (delete t.where, this.className && (t.clazz = this.className), this._sid && (t.sid = this._sid), !this._queryString) throw new Error("Please set query string.");if (t.q = this._queryString, this._highlights && (t.highlights = this._highlights.join(",")), this._sortBuilder && t.order) throw new Error("sort and order can not be set at same time.");return this._sortBuilder && (t.sort = this._sortBuilder.build()), t;
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        i = n(0),
        o = n(2)._request,
        s = n(3),
        a = s.getSessionToken;e.exports = function (e) {
      var t = function t() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};return a(t) ? e.User._fetchUserBySessionToken(a(t)) : e.User.currentAsync();
      },
          n = function n(_n) {
        return t(_n).then(function (t) {
          return e.Object.createWithoutData("_User", t.id)._toPointer();
        });
      };e.Status = function (e, t) {
        return this.data = {}, this.inboxType = "default", this.query = null, e && "object" === (void 0 === e ? "undefined" : r(e)) ? this.data = e : (e && (this.data.image = e), t && (this.data.message = t)), this;
      }, i.extend(e.Status.prototype, { get: function get(e) {
          return this.data[e];
        }, set: function set(e, t) {
          return this.data[e] = t, this;
        }, destroy: function destroy(t) {
          return this.id ? o("statuses", null, this.id, "DELETE", t) : e.Promise.reject(new Error("The status id is not exists."));
        }, toObject: function toObject() {
          return this.id ? e.Object.createWithoutData("_Status", this.id) : null;
        }, _getDataJSON: function _getDataJSON() {
          var t = i.clone(this.data);return e._encode(t);
        }, send: function send() {
          var t = this,
              r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};if (!a(r) && !e.User.current()) throw new Error("Please signin an user.");return this.query ? n(r).then(function (e) {
            var n = t.query.toJSON();n.className = t.query.className;var i = {};return i.query = n, t.data = t.data || {}, t.data.source = t.data.source || e, i.data = t._getDataJSON(), i.inboxType = t.inboxType || "default", o("statuses", null, null, "POST", i, r);
          }).then(function (n) {
            return t.id = n.objectId, t.createdAt = e._parseDate(n.createdAt), t;
          }) : e.Status.sendStatusToFollowers(this, r);
        }, _finishFetch: function _finishFetch(t) {
          this.id = t.objectId, this.createdAt = e._parseDate(t.createdAt), this.updatedAt = e._parseDate(t.updatedAt), this.messageId = t.messageId, delete t.messageId, delete t.objectId, delete t.createdAt, delete t.updatedAt, this.data = e._decode(t);
        } }), e.Status.sendStatusToFollowers = function (t) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};if (!a(r) && !e.User.current()) throw new Error("Please signin an user.");return n(r).then(function (n) {
          var i = {};i.className = "_Follower", i.keys = "follower", i.where = { user: n };var s = {};return s.query = i, t.data = t.data || {}, t.data.source = t.data.source || n, s.data = t._getDataJSON(), s.inboxType = t.inboxType || "default", o("statuses", null, null, "POST", s, r).then(function (n) {
            return t.id = n.objectId, t.createdAt = e._parseDate(n.createdAt), t;
          });
        });
      }, e.Status.sendPrivateStatus = function (t, r) {
        var s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};if (!a(s) && !e.User.current()) throw new Error("Please signin an user.");if (!r) throw new Error("Invalid target user.");var u = i.isString(r) ? r : r.id;if (!u) throw new Error("Invalid target user.");return n(s).then(function (n) {
          var r = {};r.className = "_User", r.where = { objectId: u };var i = {};return i.query = r, t.data = t.data || {}, t.data.source = t.data.source || n, i.data = t._getDataJSON(), i.inboxType = "private", t.inboxType = "private", o("statuses", null, null, "POST", i, s).then(function (n) {
            return t.id = n.objectId, t.createdAt = e._parseDate(n.createdAt), t;
          });
        });
      }, e.Status.countUnreadStatuses = function (n) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default",
            s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};if (i.isString(r) || (s = r), !a(s) && null == n && !e.User.current()) throw new Error("Please signin an user or pass the owner objectId.");return t(s).then(function (t) {
          var n = {};return n.inboxType = e._encode(r), n.owner = e._encode(t), o("subscribe/statuses/count", null, null, "GET", n, s);
        });
      }, e.Status.resetUnreadCount = function (n) {
        var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "default",
            s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};if (i.isString(r) || (s = r), !a(s) && null == n && !e.User.current()) throw new Error("Please signin an user or pass the owner objectId.");return t(s).then(function (t) {
          var n = {};return n.inboxType = e._encode(r), n.owner = e._encode(t), o("subscribe/statuses/resetUnreadCount", null, null, "POST", n, s);
        });
      }, e.Status.statusQuery = function (t) {
        var n = new e.Query("_Status");return t && n.equalTo("source", t), n;
      }, e.InboxQuery = e.Query._extend({ _objectClass: e.Status, _sinceId: 0, _maxId: 0, _inboxType: "default", _owner: null, _newObject: function _newObject() {
          return new e.Status();
        }, _createRequest: function _createRequest(t, n) {
          return e.InboxQuery.__super__._createRequest.call(this, t, n, "/subscribe/statuses");
        }, sinceId: function sinceId(e) {
          return this._sinceId = e, this;
        }, maxId: function maxId(e) {
          return this._maxId = e, this;
        }, owner: function owner(e) {
          return this._owner = e, this;
        }, inboxType: function inboxType(e) {
          return this._inboxType = e, this;
        }, toJSON: function toJSON() {
          var t = e.InboxQuery.__super__.toJSON.call(this);return t.owner = e._encode(this._owner), t.inboxType = e._encode(this._inboxType), t.sinceId = e._encode(this._sinceId), t.maxId = e._encode(this._maxId), t;
        } }), e.Status.inboxQuery = function (t, n) {
        var r = new e.InboxQuery(e.Status);return t && (r._owner = t), n && (r._inboxType = n), r;
      };
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(4),
        o = n(2),
        s = o._request,
        a = o.request,
        u = n(1),
        c = function c() {
      if ("undefined" == typeof wx || "function" != typeof wx.login) throw new Error("Weapp Login is only available in Weapp");return new u(function (e, t) {
        wx.login({ success: function success(n) {
            var r = n.code,
                i = n.errMsg;r ? e(r) : t(new Error(i));
          }, fail: function fail() {
            return t(new Error("wx.login å¤±è´¥"));
          } });
      });
    };e.exports = function (e) {
      e.User = e.Object.extend("_User", { _isCurrentUser: !1, _mergeMagicFields: function _mergeMagicFields(t) {
          return t.sessionToken && (this._sessionToken = t.sessionToken, delete t.sessionToken), e.User.__super__._mergeMagicFields.call(this, t);
        }, _cleanupAuthData: function _cleanupAuthData() {
          if (this.isCurrent()) {
            var t = this.get("authData");t && e._objectEach(this.get("authData"), function (e, n) {
              t[n] || delete t[n];
            });
          }
        }, _synchronizeAllAuthData: function _synchronizeAllAuthData() {
          if (this.get("authData")) {
            var t = this;e._objectEach(this.get("authData"), function (e, n) {
              t._synchronizeAuthData(n);
            });
          }
        }, _synchronizeAuthData: function _synchronizeAuthData(t) {
          if (this.isCurrent()) {
            var n;r.isString(t) ? (n = t, t = e.User._authProviders[n]) : n = t.getAuthType();var i = this.get("authData");if (i && t) {
              t.restoreAuthentication(i[n]) || this.dissociateAuthData(t);
            }
          }
        }, _handleSaveResult: function _handleSaveResult(t) {
          return t && !e._config.disableCurrentUser && (this._isCurrentUser = !0), this._cleanupAuthData(), this._synchronizeAllAuthData(), delete this._serverData.password, this._rebuildEstimatedDataForKey("password"), this._refreshCache(), !t && !this.isCurrent() || e._config.disableCurrentUser ? u.resolve() : u.resolve(e.User._saveCurrentUser(this));
        }, _linkWith: function _linkWith(t, n) {
          var i,
              o = this;if (r.isString(t) ? (i = t, t = e.User._authProviders[t]) : i = t.getAuthType(), n) {
            var s = this.get("authData") || {};return s[i] = n, this.save({ authData: s }).then(function (e) {
              return e._handleSaveResult(!0).then(function () {
                return e;
              });
            });
          }return t.authenticate().then(function (e) {
            return o._linkWith(t, e);
          });
        }, associateWithAuthData: function associateWithAuthData(e, t) {
          return this._linkWith(t, e);
        }, linkWithWeapp: function linkWithWeapp() {
          var e = this;return c().then(function (t) {
            return e._linkWith("lc_weapp", { code: t });
          });
        }, dissociateAuthData: function dissociateAuthData(e) {
          return this.unset("authData." + e), this.save().then(function (e) {
            return e._handleSaveResult(!0).then(function () {
              return e;
            });
          });
        }, _unlinkFrom: function _unlinkFrom(e) {
          return console.warn("DEPRECATED: User#_unlinkFrom å·²åºŸå¼ƒï¼Œè¯·ä½¿ç”¨ User#dissociateAuthData ä»£æ›¿"), this.dissociateAuthData(e);
        }, _isLinked: function _isLinked(e) {
          var t;return t = r.isString(e) ? e : e.getAuthType(), !!(this.get("authData") || {})[t];
        }, logOut: function logOut() {
          this._logOutWithAll(), this._isCurrentUser = !1;
        }, _logOutWithAll: function _logOutWithAll() {
          if (this.get("authData")) {
            var t = this;e._objectEach(this.get("authData"), function (e, n) {
              t._logOutWith(n);
            });
          }
        }, _logOutWith: function _logOutWith(t) {
          this.isCurrent() && (r.isString(t) && (t = e.User._authProviders[t]), t && t.deauthenticate && t.deauthenticate());
        }, signUp: function signUp(e, t) {
          var n = e && e.username || this.get("username");if (!n || "" === n) throw new i(i.OTHER_CAUSE, "Cannot sign up user with an empty name.");var r = e && e.password || this.get("password");if (!r || "" === r) throw new i(i.OTHER_CAUSE, "Cannot sign up user with an empty password.");return this.save(e, t).then(function (e) {
            return e._handleSaveResult(!0).then(function () {
              return e;
            });
          });
        }, signUpOrlogInWithMobilePhone: function signUpOrlogInWithMobilePhone(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              n = e && e.mobilePhoneNumber || this.get("mobilePhoneNumber");if (!n || "" === n) throw new i(i.OTHER_CAUSE, "Cannot sign up or login user by mobilePhoneNumber with an empty mobilePhoneNumber.");var r = e && e.smsCode || this.get("smsCode");if (!r || "" === r) throw new i(i.OTHER_CAUSE, "Cannot sign up or login user by mobilePhoneNumber  with an empty smsCode.");return t._makeRequest = function (e, t, n, r, i) {
            return s("usersByMobilePhone", null, null, "POST", i);
          }, this.save(e, t).then(function (e) {
            return delete e.attributes.smsCode, delete e._serverData.smsCode, e._handleSaveResult(!0).then(function () {
              return e;
            });
          });
        }, logIn: function logIn() {
          var e = this;return s("login", null, null, "POST", this.toJSON()).then(function (t) {
            var n = e.parse(t);return e._finishFetch(n), e._handleSaveResult(!0).then(function () {
              return n.smsCode || delete e.attributes.smsCode, e;
            });
          });
        }, save: function save(t, n, i) {
          var o, s;return r.isObject(t) || r.isNull(t) || r.isUndefined(t) ? (o = t, s = n) : (o = {}, o[t] = n, s = i), s = s || {}, e.Object.prototype.save.call(this, o, s).then(function (e) {
            return e._handleSaveResult(!1).then(function () {
              return e;
            });
          });
        }, follow: function follow(t, n) {
          if (!this.id) throw new Error("Please signin.");var i = void 0,
              o = void 0;t.user ? (i = t.user, o = t.attributes) : i = t;var a = r.isString(i) ? i : i.id;if (!a) throw new Error("Invalid target user.");var u = "users/" + this.id + "/friendship/" + a;return s(u, null, null, "POST", e._encode(o), n);
        }, unfollow: function unfollow(e, t) {
          if (!this.id) throw new Error("Please signin.");var n = void 0;n = e.user ? e.user : e;var i = r.isString(n) ? n : n.id;if (!i) throw new Error("Invalid target user.");var o = "users/" + this.id + "/friendship/" + i;return s(o, null, null, "DELETE", null, t);
        }, followerQuery: function followerQuery() {
          return e.User.followerQuery(this.id);
        }, followeeQuery: function followeeQuery() {
          return e.User.followeeQuery(this.id);
        }, fetch: function fetch(t, n) {
          return e.Object.prototype.fetch.call(this, t, n).then(function (e) {
            return e._handleSaveResult(!1).then(function () {
              return e;
            });
          });
        }, updatePassword: function updatePassword(e, t, n) {
          var r = "users/" + this.id + "/updatePassword";return s(r, null, null, "PUT", { old_password: e, new_password: t }, n);
        }, isCurrent: function isCurrent() {
          return this._isCurrentUser;
        }, getUsername: function getUsername() {
          return this.get("username");
        }, getMobilePhoneNumber: function getMobilePhoneNumber() {
          return this.get("mobilePhoneNumber");
        }, setMobilePhoneNumber: function setMobilePhoneNumber(e, t) {
          return this.set("mobilePhoneNumber", e, t);
        }, setUsername: function setUsername(e, t) {
          return this.set("username", e, t);
        }, setPassword: function setPassword(e, t) {
          return this.set("password", e, t);
        }, getEmail: function getEmail() {
          return this.get("email");
        }, setEmail: function setEmail(e, t) {
          return this.set("email", e, t);
        }, authenticated: function authenticated() {
          return console.warn("DEPRECATED: å¦‚æžœè¦åˆ¤æ–­å½“å‰ç”¨æˆ·çš„ç™»å½•çŠ¶æ€æ˜¯å¦æœ‰æ•ˆï¼Œè¯·ä½¿ç”¨ currentUser.isAuthenticated().then()ï¼Œå¦‚æžœè¦åˆ¤æ–­è¯¥ç”¨æˆ·æ˜¯å¦æ˜¯å½“å‰ç™»å½•ç”¨æˆ·ï¼Œè¯·ä½¿ç”¨ user.id === currentUser.idã€‚"), !!this._sessionToken && !e._config.disableCurrentUser && e.User.current() && e.User.current().id === this.id;
        }, isAuthenticated: function isAuthenticated() {
          var t = this;return u.resolve().then(function () {
            return !!t._sessionToken && e.User._fetchUserBySessionToken(t._sessionToken).then(function () {
              return !0;
            }, function (e) {
              if (211 === e.code) return !1;throw e;
            });
          });
        }, getSessionToken: function getSessionToken() {
          return this._sessionToken;
        }, refreshSessionToken: function refreshSessionToken(e) {
          var t = this;return s("users/" + this.id + "/refreshSessionToken", null, null, "PUT", null, e).then(function (e) {
            return t._finishFetch(e), t._handleSaveResult(!0).then(function () {
              return t;
            });
          });
        }, getRoles: function getRoles(t) {
          return e.Relation.reverseQuery("_Role", "users", this).find(t);
        } }, { _currentUser: null, _currentUserMatchesDisk: !1, _CURRENT_USER_KEY: "currentUser", _authProviders: {}, signUp: function signUp(t, n, r, i) {
          return r = r || {}, r.username = t, r.password = n, e.Object._create("_User").signUp(r, i);
        }, logIn: function logIn(t, n, r) {
          var i = e.Object._create("_User");return i._finishFetch({ username: t, password: n }), i.logIn(r);
        }, become: function become(e) {
          return this._fetchUserBySessionToken(e).then(function (e) {
            return e._handleSaveResult(!0).then(function () {
              return e;
            });
          });
        }, _fetchUserBySessionToken: function _fetchUserBySessionToken(t) {
          var n = e.Object._create("_User");return a({ method: "GET", path: "/users/me", authOptions: { sessionToken: t } }).then(function (e) {
            var t = n.parse(e);return n._finishFetch(t), n;
          });
        }, logInWithMobilePhoneSmsCode: function logInWithMobilePhoneSmsCode(t, n, r) {
          var i = e.Object._create("_User");return i._finishFetch({ mobilePhoneNumber: t, smsCode: n }), i.logIn(r);
        }, signUpOrlogInWithMobilePhone: function signUpOrlogInWithMobilePhone(t, n, r, i) {
          return r = r || {}, r.mobilePhoneNumber = t, r.smsCode = n, e.Object._create("_User").signUpOrlogInWithMobilePhone(r, i);
        }, logInWithMobilePhone: function logInWithMobilePhone(t, n, r) {
          var i = e.Object._create("_User");return i._finishFetch({ mobilePhoneNumber: t, password: n }), i.logIn(r);
        }, signUpOrlogInWithAuthData: function signUpOrlogInWithAuthData(t, n) {
          return e.User._logInWith(n, t);
        }, loginWithWeapp: function loginWithWeapp() {
          var e = this;return c().then(function (t) {
            return e.signUpOrlogInWithAuthData({ code: t }, "lc_weapp");
          });
        }, associateWithAuthData: function associateWithAuthData(e, t, n) {
          return console.warn("DEPRECATED: User.associateWithAuthData å·²åºŸå¼ƒï¼Œè¯·ä½¿ç”¨ User#associateWithAuthData ä»£æ›¿"), e._linkWith(t, n);
        }, logOut: function logOut() {
          return e._config.disableCurrentUser ? (console.warn("AV.User.current() was disabled in multi-user environment, call logOut() from user object instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html"), u.resolve(null)) : (null !== e.User._currentUser && (e.User._currentUser._logOutWithAll(), e.User._currentUser._isCurrentUser = !1), e.User._currentUserMatchesDisk = !0, e.User._currentUser = null, e.localStorage.removeItemAsync(e._getAVPath(e.User._CURRENT_USER_KEY)).then(function () {
            return e._refreshSubscriptionId();
          }));
        }, followerQuery: function followerQuery(t) {
          if (!t || !r.isString(t)) throw new Error("Invalid user object id.");var n = new e.FriendShipQuery("_Follower");return n._friendshipTag = "follower", n.equalTo("user", e.Object.createWithoutData("_User", t)), n;
        }, followeeQuery: function followeeQuery(t) {
          if (!t || !r.isString(t)) throw new Error("Invalid user object id.");var n = new e.FriendShipQuery("_Followee");return n._friendshipTag = "followee", n.equalTo("user", e.Object.createWithoutData("_User", t)), n;
        }, requestPasswordReset: function requestPasswordReset(e) {
          return s("requestPasswordReset", null, null, "POST", { email: e });
        }, requestEmailVerify: function requestEmailVerify(e) {
          return s("requestEmailVerify", null, null, "POST", { email: e });
        }, requestMobilePhoneVerify: function requestMobilePhoneVerify(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              n = { mobilePhoneNumber: e };return t.validateToken && (n.validate_token = t.validateToken), s("requestMobilePhoneVerify", null, null, "POST", n, t);
        }, requestPasswordResetBySmsCode: function requestPasswordResetBySmsCode(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              n = { mobilePhoneNumber: e };return t.validateToken && (n.validate_token = t.validateToken), s("requestPasswordResetBySmsCode", null, null, "POST", n, t);
        }, resetPasswordBySmsCode: function resetPasswordBySmsCode(e, t) {
          return s("resetPasswordBySmsCode", null, e, "PUT", { password: t });
        }, verifyMobilePhone: function verifyMobilePhone(e) {
          return s("verifyMobilePhone", null, e, "POST", null);
        }, requestLoginSmsCode: function requestLoginSmsCode(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
              n = { mobilePhoneNumber: e };return t.validateToken && (n.validate_token = t.validateToken), s("requestLoginSmsCode", null, null, "POST", n, t);
        }, currentAsync: function currentAsync() {
          return e._config.disableCurrentUser ? (console.warn("AV.User.currentAsync() was disabled in multi-user environment, access user from request instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html"), u.resolve(null)) : e.User._currentUser ? u.resolve(e.User._currentUser) : e.User._currentUserMatchesDisk ? u.resolve(e.User._currentUser) : e.localStorage.getItemAsync(e._getAVPath(e.User._CURRENT_USER_KEY)).then(function (t) {
            if (!t) return null;e.User._currentUserMatchesDisk = !0, e.User._currentUser = e.Object._create("_User"), e.User._currentUser._isCurrentUser = !0;var n = JSON.parse(t);return e.User._currentUser.id = n._id, delete n._id, e.User._currentUser._sessionToken = n._sessionToken, delete n._sessionToken, e.User._currentUser._finishFetch(n), e.User._currentUser._synchronizeAllAuthData(), e.User._currentUser._refreshCache(), e.User._currentUser._opSetQueue = [{}], e.User._currentUser;
          });
        }, current: function current() {
          if (e._config.disableCurrentUser) return console.warn("AV.User.current() was disabled in multi-user environment, access user from request instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html"), null;if (e.User._currentUser) return e.User._currentUser;if (e.User._currentUserMatchesDisk) return e.User._currentUser;e.User._currentUserMatchesDisk = !0;var t = e.localStorage.getItem(e._getAVPath(e.User._CURRENT_USER_KEY));if (!t) return null;e.User._currentUser = e.Object._create("_User"), e.User._currentUser._isCurrentUser = !0;var n = JSON.parse(t);return e.User._currentUser.id = n._id, delete n._id, e.User._currentUser._sessionToken = n._sessionToken, delete n._sessionToken, e.User._currentUser._finishFetch(n), e.User._currentUser._synchronizeAllAuthData(), e.User._currentUser._refreshCache(), e.User._currentUser._opSetQueue = [{}], e.User._currentUser;
        }, _saveCurrentUser: function _saveCurrentUser(t) {
          var n;return n = e.User._currentUser !== t ? e.User.logOut() : u.resolve(), n.then(function () {
            t._isCurrentUser = !0, e.User._currentUser = t;var n = t.toJSON();return n._id = t.id, n._sessionToken = t._sessionToken, e.localStorage.setItemAsync(e._getAVPath(e.User._CURRENT_USER_KEY), JSON.stringify(n)).then(function () {
              return e.User._currentUserMatchesDisk = !0, e._refreshSubscriptionId();
            });
          });
        }, _registerAuthenticationProvider: function _registerAuthenticationProvider(t) {
          e.User._authProviders[t.getAuthType()] = t, !e._config.disableCurrentUser && e.User.current() && e.User.current()._synchronizeAuthData(t.getAuthType());
        }, _logInWith: function _logInWith(t, n) {
          return e.Object._create("_User")._linkWith(t, n);
        } });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(43).polyfill;window = window || {}, r(), r(window);try {
      localStorage = localStorage || n(14);
    } catch (e) {}try {
      XMLHttpRequest = XMLHttpRequest || n(17);
    } catch (e) {}try {
      FormData = FormData || n(9);
    } catch (e) {}try {
      WebSocket = WebSocket || n(16);
    } catch (e) {}try {
      navigator = navigator || n(15);
    } catch (e) {}
  }, function (e, t, n) {
    "use strict";
    (function (t) {
      var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return typeof e === "undefined" ? "undefined" : _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
      },
          i = n(14),
          o = n(17),
          s = n(9),
          a = n(16),
          u = n(15);e.exports = { polyfill: function polyfill() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t || window;if ("object" !== (void 0 === e ? "undefined" : r(e))) throw new Error("polyfill target is not an Object");var n = { localStorage: i, XMLHttpRequest: o, FormData: s, WebSocket: a, Object: Object, navigator: u };for (var c in n) {
            e[c] || (e[c] = n[c]);
          }
        }, localStorage: i, XMLHttpRequest: o, FormData: s, WebSocket: a };
    }).call(t, n(8));
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      var t = this;this.AV = e, this.lockedUntil = 0, s.getAsync("serverURLs").then(function (e) {
        if (!e) return t.lock(0);var n = e.serverURLs,
            r = e.lockedUntil;t.AV._setServerURLs(n, !1), t.lockedUntil = r;
      }).catch(function () {
        return t.lock(0);
      });
    }var i = n(3),
        o = i.ajax,
        s = n(11);r.prototype.disable = function () {
      this.disabled = !0;
    }, r.prototype.lock = function (e) {
      this.lockedUntil = Date.now() + e;
    }, r.prototype.refresh = function () {
      var e = this;if (!(this.disabled || Date.now() < this.lockedUntil)) {
        this.lock(10);return o({ method: "get", url: "https://app-router.leancloud.cn/2/route", query: { appId: this.AV.applicationId } }).then(function (t) {
          if (!e.disabled) {
            var n = t.ttl;if (!n) throw new Error("missing ttl");n *= 1e3;var r = { push: "https://" + t.push_server, stats: "https://" + t.stats_server, engine: "https://" + t.engine_server, api: "https://" + t.api_server };return e.AV._setServerURLs(r, !1), e.lock(n), s.setAsync("serverURLs", { serverURLs: r, lockedUntil: e.lockedUntil }, n);
          }
        }).catch(function (t) {
          console.warn("refresh server URLs failed: " + t.message), e.lock(600);
        });
      }
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict"; /*!
                  * LeanCloud JavaScript SDK
                  * https://leancloud.cn
                  *
                  * Copyright 2016 LeanCloud.cn, Inc.
                  * The LeanCloud JavaScript SDK is freely distributable under the MIT license.
                  */

    n(34);var r = n(5);r._ = n(0), r.version = n(13), r.Promise = n(1), r.localStorage = n(12), r.Cache = n(11), r.Error = n(4), n(29), n(26)(r), n(28)(r), n(22)(r), n(33)(r), n(37)(r), n(27)(r), n(32)(r), n(38)(r), n(41)(r), n(36)(r), n(31)(r), n(23)(r), n(24)(r), n(35)(r), n(40)(r), n(39)(r), n(30)(r), r.Conversation = n(25), e.exports = r;
  }, function (e, t, n) {
    "use strict";
    e.exports = [];
  }, function (e, t, n) {
    "use strict";
    var r = n(13),
        i = ["Weapp"].concat(n(46));e.exports = "LeanCloud-JS-SDK/" + r + " (" + i.join("; ") + ")";
  }, function (e, t, n) {
    "use strict";
    var r = n(7),
        i = n(6)("cos"),
        o = n(1);e.exports = function (e, t, n) {
      var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};n.attributes.url = e.url, n._bucket = e.bucket, n.id = e.objectId;var a = e.upload_url + "?sign=" + encodeURIComponent(e.token);return new o(function (e, o) {
        var u = r("POST", a).set(n._uploadHeaders).attach("fileContent", t, n.attributes.name).field("op", "upload");s.onprogress && u.on("progress", s.onprogress), u.end(function (t, r) {
          if (r && i(r.status, r.body, r.text), t) return r && (t.statusCode = r.status, t.responseText = r.text, t.response = r.body), o(t);e(n);
        });
      });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(7),
        i = n(1),
        o = n(6)("qiniu");e.exports = function (e, t, n) {
      var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};n.attributes.url = e.url, n._bucket = e.bucket, n.id = e.objectId;var a = e.token,
          u = e.upload_url || "https://upload.qiniup.com";return new i(function (e, i) {
        var c = r("POST", u).set(n._uploadHeaders).attach("file", t, n.attributes.name).field("name", n.attributes.name).field("key", n._qiniu_key).field("token", a);s.onprogress && c.on("progress", s.onprogress), c.end(function (t, r) {
          if (r && o(r.status, r.body, r.text), t) return r && (t.statusCode = r.status, t.responseText = r.text, t.response = r.body), i(t);e(n);
        });
      });
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(7),
        i = n(1),
        o = function o(e, t) {
      return t && (e.statusCode = t.status, e.responseText = t.text, e.response = t.body), e;
    };e.exports = function (e, t, n) {
      var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};return n.attributes.url = e.url, n._bucket = e.bucket, n.id = e.objectId, new i(function (i, a) {
        var u = r("PUT", e.upload_url).set(Object.assign({ "Content-Type": n.get("mime_type"), "Cache-Control": "public, max-age=31536000" }, n._uploadHeaders));s.onprogress && u.on("progress", s.onprogress), u.on("response", function (e) {
          if (e.ok) return i(n);a(o(e.error, e));
        }), u.on("error", function (e, t) {
          return a(o(e, t));
        }), u.send(t).end();
      });
    };
  }, function (e, t, n) {
    "use strict";
    (function (t) {
      var r = n(0),
          i = (n(1), {}),
          o = ["getItem", "setItem", "removeItem", "clear"],
          s = t.localStorage;try {
        var a = "__storejs__";if (s.setItem(a, a), s.getItem(a) != a) throw new Error();s.removeItem(a);
      } catch (e) {
        s = n(61);
      }r(o).each(function (e) {
        i[e] = function () {
          return s[e].apply(s, arguments);
        };
      }), i.async = !1, e.exports = i;
    }).call(t, n(8));
  }, function (e, t, n) {
    "use strict";
    var r = function r(e, t) {
      var n;e.indexOf("base64") < 0 ? n = atob(e) : e.split(",")[0].indexOf("base64") >= 0 ? (t = t || e.split(",")[0].split(":")[1].split(";")[0], n = atob(e.split(",")[1])) : n = unescape(e.split(",")[1]);for (var r = new Uint8Array(n.length), i = 0; i < n.length; i++) {
        r[i] = n.charCodeAt(i);
      }return new Blob([r], { type: t });
    };e.exports = r;
  }, function (e, t, n) {
    function r(e) {
      if (e) return i(e);
    }function i(e) {
      for (var t in r.prototype) {
        e[t] = r.prototype[t];
      }return e;
    }e.exports = r, r.prototype.on = r.prototype.addEventListener = function (e, t) {
      return this._callbacks = this._callbacks || {}, (this._callbacks["$" + e] = this._callbacks["$" + e] || []).push(t), this;
    }, r.prototype.once = function (e, t) {
      function n() {
        this.off(e, n), t.apply(this, arguments);
      }return n.fn = t, this.on(e, n), this;
    }, r.prototype.off = r.prototype.removeListener = r.prototype.removeAllListeners = r.prototype.removeEventListener = function (e, t) {
      if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;var n = this._callbacks["$" + e];if (!n) return this;if (1 == arguments.length) return delete this._callbacks["$" + e], this;for (var r, i = 0; i < n.length; i++) {
        if ((r = n[i]) === t || r.fn === t) {
          n.splice(i, 1);break;
        }
      }return this;
    }, r.prototype.emit = function (e) {
      this._callbacks = this._callbacks || {};var t = [].slice.call(arguments, 1),
          n = this._callbacks["$" + e];if (n) {
        n = n.slice(0);for (var r = 0, i = n.length; r < i; ++r) {
          n[r].apply(this, t);
        }
      }return this;
    }, r.prototype.listeners = function (e) {
      return this._callbacks = this._callbacks || {}, this._callbacks["$" + e] || [];
    }, r.prototype.hasListeners = function (e) {
      return !!this.listeners(e).length;
    };
  }, function (e, t) {
    !function () {
      var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
          n = { rotl: function rotl(e, t) {
          return e << t | e >>> 32 - t;
        }, rotr: function rotr(e, t) {
          return e << 32 - t | e >>> t;
        }, endian: function endian(e) {
          if (e.constructor == Number) return 16711935 & n.rotl(e, 8) | 4278255360 & n.rotl(e, 24);for (var t = 0; t < e.length; t++) {
            e[t] = n.endian(e[t]);
          }return e;
        }, randomBytes: function randomBytes(e) {
          for (var t = []; e > 0; e--) {
            t.push(Math.floor(256 * Math.random()));
          }return t;
        }, bytesToWords: function bytesToWords(e) {
          for (var t = [], n = 0, r = 0; n < e.length; n++, r += 8) {
            t[r >>> 5] |= e[n] << 24 - r % 32;
          }return t;
        }, wordsToBytes: function wordsToBytes(e) {
          for (var t = [], n = 0; n < 32 * e.length; n += 8) {
            t.push(e[n >>> 5] >>> 24 - n % 32 & 255);
          }return t;
        }, bytesToHex: function bytesToHex(e) {
          for (var t = [], n = 0; n < e.length; n++) {
            t.push((e[n] >>> 4).toString(16)), t.push((15 & e[n]).toString(16));
          }return t.join("");
        }, hexToBytes: function hexToBytes(e) {
          for (var t = [], n = 0; n < e.length; n += 2) {
            t.push(parseInt(e.substr(n, 2), 16));
          }return t;
        }, bytesToBase64: function bytesToBase64(e) {
          for (var n = [], r = 0; r < e.length; r += 3) {
            for (var i = e[r] << 16 | e[r + 1] << 8 | e[r + 2], o = 0; o < 4; o++) {
              8 * r + 6 * o <= 8 * e.length ? n.push(t.charAt(i >>> 6 * (3 - o) & 63)) : n.push("=");
            }
          }return n.join("");
        }, base64ToBytes: function base64ToBytes(e) {
          e = e.replace(/[^A-Z0-9+\/]/gi, "");for (var n = [], r = 0, i = 0; r < e.length; i = ++r % 4) {
            0 != i && n.push((t.indexOf(e.charAt(r - 1)) & Math.pow(2, -2 * i + 8) - 1) << 2 * i | t.indexOf(e.charAt(r)) >>> 6 - 2 * i);
          }return n;
        } };e.exports = n;
    }();
  }, function (e, t, n) {
    function r(e) {
      var n,
          r = 0;for (n in e) {
        r = (r << 5) - r + e.charCodeAt(n), r |= 0;
      }return t.colors[Math.abs(r) % t.colors.length];
    }function i(e) {
      function n() {
        if (n.enabled) {
          var e = n,
              r = +new Date(),
              o = r - (i || r);e.diff = o, e.prev = i, e.curr = r, i = r;for (var s = new Array(arguments.length), a = 0; a < s.length; a++) {
            s[a] = arguments[a];
          }s[0] = t.coerce(s[0]), "string" != typeof s[0] && s.unshift("%O");var u = 0;s[0] = s[0].replace(/%([a-zA-Z%])/g, function (n, r) {
            if ("%%" === n) return n;u++;var i = t.formatters[r];if ("function" == typeof i) {
              var o = s[u];n = i.call(e, o), s.splice(u, 1), u--;
            }return n;
          }), t.formatArgs.call(e, s);(n.log || t.log || console.log.bind(console)).apply(e, s);
        }
      }var i;return n.namespace = e, n.enabled = t.enabled(e), n.useColors = t.useColors(), n.color = r(e), n.destroy = o, "function" == typeof t.init && t.init(n), t.instances.push(n), n;
    }function o() {
      var e = t.instances.indexOf(this);return -1 !== e && (t.instances.splice(e, 1), !0);
    }function s(e) {
      t.save(e), t.names = [], t.skips = [];var n,
          r = ("string" == typeof e ? e : "").split(/[\s,]+/),
          i = r.length;for (n = 0; n < i; n++) {
        r[n] && (e = r[n].replace(/\*/g, ".*?"), "-" === e[0] ? t.skips.push(new RegExp("^" + e.substr(1) + "$")) : t.names.push(new RegExp("^" + e + "$")));
      }for (n = 0; n < t.instances.length; n++) {
        var o = t.instances[n];o.enabled = t.enabled(o.namespace);
      }
    }function a() {
      t.enable("");
    }function u(e) {
      if ("*" === e[e.length - 1]) return !0;var n, r;for (n = 0, r = t.skips.length; n < r; n++) {
        if (t.skips[n].test(e)) return !1;
      }for (n = 0, r = t.names.length; n < r; n++) {
        if (t.names[n].test(e)) return !0;
      }return !1;
    }function c(e) {
      return e instanceof Error ? e.stack || e.message : e;
    }t = e.exports = i.debug = i.default = i, t.coerce = c, t.disable = a, t.enable = s, t.enabled = u, t.humanize = n(63), t.instances = [], t.names = [], t.skips = [], t.formatters = {};
  }, function (e, t, n) {
    (function (t) {
      /*!
      * @overview es6-promise - a tiny implementation of Promises/A+.
      * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
      * @license   Licensed under MIT license
      *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
      * @version   4.1.1
      */
      !function (t, n) {
        e.exports = n();
      }(0, function () {
        "use strict";
        function e(e) {
          var t = typeof e === "undefined" ? "undefined" : _typeof(e);return null !== e && ("object" === t || "function" === t);
        }function r(e) {
          return "function" == typeof e;
        }function i(e) {
          W = e;
        }function o(e) {
          V = e;
        }function s() {
          return void 0 !== Q ? function () {
            Q(u);
          } : a();
        }function a() {
          var e = setTimeout;return function () {
            return e(u, 1);
          };
        }function u() {
          for (var e = 0; e < J; e += 2) {
            (0, X[e])(X[e + 1]), X[e] = void 0, X[e + 1] = void 0;
          }J = 0;
        }function c(e, t) {
          var n = arguments,
              r = this,
              i = new this.constructor(h);void 0 === i[Z] && x(i);var o = r._state;return o ? function () {
            var e = n[o - 1];V(function () {
              return T(o, i, e, r._result);
            });
          }() : S(r, i, e, t), i;
        }function l(e) {
          var t = this;if (e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && e.constructor === t) return e;var n = new t(h);return g(n, e), n;
        }function h() {}function f() {
          return new TypeError("You cannot resolve a promise with itself");
        }function d() {
          return new TypeError("A promises callback cannot return that same promise.");
        }function p(e) {
          try {
            return e.then;
          } catch (e) {
            return re.error = e, re;
          }
        }function _(e, t, n, r) {
          try {
            e.call(t, n, r);
          } catch (e) {
            return e;
          }
        }function v(e, t, n) {
          V(function (e) {
            var r = !1,
                i = _(n, t, function (n) {
              r || (r = !0, t !== n ? g(e, n) : w(e, n));
            }, function (t) {
              r || (r = !0, O(e, t));
            }, "Settle: " + (e._label || " unknown promise"));!r && i && (r = !0, O(e, i));
          }, e);
        }function y(e, t) {
          t._state === te ? w(e, t._result) : t._state === ne ? O(e, t._result) : S(t, void 0, function (t) {
            return g(e, t);
          }, function (t) {
            return O(e, t);
          });
        }function m(e, t, n) {
          t.constructor === e.constructor && n === c && t.constructor.resolve === l ? y(e, t) : n === re ? (O(e, re.error), re.error = null) : void 0 === n ? w(e, t) : r(n) ? v(e, t, n) : w(e, t);
        }function g(t, n) {
          t === n ? O(t, f()) : e(n) ? m(t, n, p(n)) : w(t, n);
        }function b(e) {
          e._onerror && e._onerror(e._result), E(e);
        }function w(e, t) {
          e._state === ee && (e._result = t, e._state = te, 0 !== e._subscribers.length && V(E, e));
        }function O(e, t) {
          e._state === ee && (e._state = ne, e._result = t, V(b, e));
        }function S(e, t, n, r) {
          var i = e._subscribers,
              o = i.length;e._onerror = null, i[o] = t, i[o + te] = n, i[o + ne] = r, 0 === o && e._state && V(E, e);
        }function E(e) {
          var t = e._subscribers,
              n = e._state;if (0 !== t.length) {
            for (var r = void 0, i = void 0, o = e._result, s = 0; s < t.length; s += 3) {
              r = t[s], i = t[s + n], r ? T(n, r, i, o) : i(o);
            }e._subscribers.length = 0;
          }
        }function A() {
          this.error = null;
        }function C(e, t) {
          try {
            return e(t);
          } catch (e) {
            return ie.error = e, ie;
          }
        }function T(e, t, n, i) {
          var o = r(n),
              s = void 0,
              a = void 0,
              u = void 0,
              c = void 0;if (o) {
            if (s = C(n, i), s === ie ? (c = !0, a = s.error, s.error = null) : u = !0, t === s) return void O(t, d());
          } else s = i, u = !0;t._state !== ee || (o && u ? g(t, s) : c ? O(t, a) : e === te ? w(t, s) : e === ne && O(t, s));
        }function j(e, t) {
          try {
            t(function (t) {
              g(e, t);
            }, function (t) {
              O(e, t);
            });
          } catch (t) {
            O(e, t);
          }
        }function N() {
          return oe++;
        }function x(e) {
          e[Z] = oe++, e._state = void 0, e._result = void 0, e._subscribers = [];
        }function k(e, t) {
          this._instanceConstructor = e, this.promise = new e(h), this.promise[Z] || x(this.promise), B(t) ? (this.length = t.length, this._remaining = t.length, this._result = new Array(this.length), 0 === this.length ? w(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(t), 0 === this._remaining && w(this.promise, this._result))) : O(this.promise, U());
        }function U() {
          return new Error("Array Methods must be provided an Array");
        }function I(e) {
          return new k(this, e).promise;
        }function P(e) {
          var t = this;return new t(B(e) ? function (n, r) {
            for (var i = e.length, o = 0; o < i; o++) {
              t.resolve(e[o]).then(n, r);
            }
          } : function (e, t) {
            return t(new TypeError("You must pass an array to race."));
          });
        }function R(e) {
          var t = this,
              n = new t(h);return O(n, e), n;
        }function D() {
          throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
        }function F() {
          throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
        }function L(e) {
          this[Z] = N(), this._result = this._state = void 0, this._subscribers = [], h !== e && ("function" != typeof e && D(), this instanceof L ? j(this, e) : F());
        }function q() {
          var e = void 0;if (void 0 !== t) e = t;else if ("undefined" != typeof self) e = self;else try {
            e = Function("return this")();
          } catch (e) {
            throw new Error("polyfill failed because global object is unavailable in this environment");
          }var n = e.Promise;if (n) {
            var r = null;try {
              r = Object.prototype.toString.call(n.resolve());
            } catch (e) {}if ("[object Promise]" === r && !n.cast) return;
          }e.Promise = L;
        }var M = void 0;M = Array.isArray ? Array.isArray : function (e) {
          return "[object Array]" === Object.prototype.toString.call(e);
        };var B = M,
            J = 0,
            Q = void 0,
            W = void 0,
            V = function V(e, t) {
          X[J] = e, X[J + 1] = t, 2 === (J += 2) && (W ? W(u) : Y());
        },
            H = "undefined" != typeof window ? window : void 0,
            z = H || {},
            K = z.MutationObserver || z.WebKitMutationObserver,
            G = "undefined" == typeof self && "undefined" != typeof process && "[object process]" === {}.toString.call(process),
            $ = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel,
            X = new Array(1e3),
            Y = void 0;Y = G ? function () {
          return function () {
            return process.nextTick(u);
          };
        }() : K ? function () {
          var e = 0,
              t = new K(u),
              n = document.createTextNode("");return t.observe(n, { characterData: !0 }), function () {
            n.data = e = ++e % 2;
          };
        }() : $ ? function () {
          var e = new MessageChannel();return e.port1.onmessage = u, function () {
            return e.port2.postMessage(0);
          };
        }() : void 0 === H ? function () {
          try {
            var e = n(68);return Q = e.runOnLoop || e.runOnContext, s();
          } catch (e) {
            return a();
          }
        }() : a();var Z = Math.random().toString(36).substring(16),
            ee = void 0,
            te = 1,
            ne = 2,
            re = new A(),
            ie = new A(),
            oe = 0;return k.prototype._enumerate = function (e) {
          for (var t = 0; this._state === ee && t < e.length; t++) {
            this._eachEntry(e[t], t);
          }
        }, k.prototype._eachEntry = function (e, t) {
          var n = this._instanceConstructor,
              r = n.resolve;if (r === l) {
            var i = p(e);if (i === c && e._state !== ee) this._settledAt(e._state, t, e._result);else if ("function" != typeof i) this._remaining--, this._result[t] = e;else if (n === L) {
              var o = new n(h);m(o, e, i), this._willSettleAt(o, t);
            } else this._willSettleAt(new n(function (t) {
              return t(e);
            }), t);
          } else this._willSettleAt(r(e), t);
        }, k.prototype._settledAt = function (e, t, n) {
          var r = this.promise;r._state === ee && (this._remaining--, e === ne ? O(r, n) : this._result[t] = n), 0 === this._remaining && w(r, this._result);
        }, k.prototype._willSettleAt = function (e, t) {
          var n = this;S(e, void 0, function (e) {
            return n._settledAt(te, t, e);
          }, function (e) {
            return n._settledAt(ne, t, e);
          });
        }, L.all = I, L.race = P, L.resolve = l, L.reject = R, L._setScheduler = i, L._setAsap = o, L._asap = V, L.prototype = { constructor: L, then: c, catch: function _catch(e) {
            return this.then(null, e);
          } }, L.polyfill = q, L.Promise = L, L;
      });
    }).call(t, n(8));
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      for (var n = e[s][t]; null != n;) {
        if (n.kind === a) return n.listener;n = n.next;
      }return null;
    }function i(e, t, n) {
      "function" != typeof n && "object" != (typeof n === "undefined" ? "undefined" : _typeof(n)) && (n = null);for (var r = null, i = e[s][t]; null != i;) {
        i.kind === a ? null == r ? e[s][t] = i.next : r.next = i.next : r = i, i = i.next;
      }null != n && (null == r ? e[s][t] = u(n, a) : r.next = u(n, a));
    }var o = n(10),
        s = o.LISTENERS,
        a = o.ATTRIBUTE,
        u = o.newNode;t.defineCustomEventTarget = function (e, t) {
      function n() {
        e.call(this);
      }var o = { constructor: { value: n, configurable: !0, writable: !0 } };return t.forEach(function (e) {
        o["on" + e] = { get: function get() {
            return r(this, e);
          }, set: function set(t) {
            i(this, e, t);
          }, configurable: !0, enumerable: !0 };
      }), n.prototype = Object.create(e.prototype, o), n;
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(10).createUniqueKey,
        i = r("stop_immediate_propagation_flag"),
        o = r("canceled_flag"),
        s = r("original_event"),
        a = Object.freeze({ stopPropagation: Object.freeze({ value: function value() {
          var e = this[s];"function" == typeof e.stopPropagation && e.stopPropagation();
        }, writable: !0, configurable: !0 }), stopImmediatePropagation: Object.freeze({ value: function value() {
          this[i] = !0;var e = this[s];"function" == typeof e.stopImmediatePropagation && e.stopImmediatePropagation();
        }, writable: !0, configurable: !0 }), preventDefault: Object.freeze({ value: function value() {
          !0 === this.cancelable && (this[o] = !0);var e = this[s];"function" == typeof e.preventDefault && e.preventDefault();
        }, writable: !0, configurable: !0 }), defaultPrevented: Object.freeze({ get: function get() {
          return this[o];
        }, enumerable: !0, configurable: !0 }) });t.STOP_IMMEDIATE_PROPAGATION_FLAG = i, t.createEventWrapper = function (e, t) {
      var n = "number" == typeof e.timeStamp ? e.timeStamp : Date.now(),
          r = { type: { value: e.type, enumerable: !0 }, target: { value: t, enumerable: !0 }, currentTarget: { value: t, enumerable: !0 }, eventPhase: { value: 2, enumerable: !0 }, bubbles: { value: Boolean(e.bubbles), enumerable: !0 }, cancelable: { value: Boolean(e.cancelable), enumerable: !0 }, timeStamp: { value: n, enumerable: !0 }, isTrusted: { value: !1, enumerable: !0 } };return r[i] = { value: !1, writable: !0 }, r[o] = { value: !1, writable: !0 }, r[s] = { value: e }, void 0 !== e.detail && (r.detail = { value: e.detail, enumerable: !0 }), Object.create(Object.create(e, a), r);
    };
  }, function (e, t, n) {
    "use strict";
    function r() {}function i(e, t, n) {
      this.fn = e, this.context = t, this.once = n || !1;
    }function o() {
      this._events = new r(), this._eventsCount = 0;
    }var s = Object.prototype.hasOwnProperty,
        a = "~";Object.create && (r.prototype = Object.create(null), new r().__proto__ || (a = !1)), o.prototype.eventNames = function () {
      var e,
          t,
          n = [];if (0 === this._eventsCount) return n;for (t in e = this._events) {
        s.call(e, t) && n.push(a ? t.slice(1) : t);
      }return Object.getOwnPropertySymbols ? n.concat(Object.getOwnPropertySymbols(e)) : n;
    }, o.prototype.listeners = function (e, t) {
      var n = a ? a + e : e,
          r = this._events[n];if (t) return !!r;if (!r) return [];if (r.fn) return [r.fn];for (var i = 0, o = r.length, s = new Array(o); i < o; i++) {
        s[i] = r[i].fn;
      }return s;
    }, o.prototype.emit = function (e, t, n, r, i, o) {
      var s = a ? a + e : e;if (!this._events[s]) return !1;var u,
          c,
          l = this._events[s],
          h = arguments.length;if (l.fn) {
        switch (l.once && this.removeListener(e, l.fn, void 0, !0), h) {case 1:
            return l.fn.call(l.context), !0;case 2:
            return l.fn.call(l.context, t), !0;case 3:
            return l.fn.call(l.context, t, n), !0;case 4:
            return l.fn.call(l.context, t, n, r), !0;case 5:
            return l.fn.call(l.context, t, n, r, i), !0;case 6:
            return l.fn.call(l.context, t, n, r, i, o), !0;}for (c = 1, u = new Array(h - 1); c < h; c++) {
          u[c - 1] = arguments[c];
        }l.fn.apply(l.context, u);
      } else {
        var f,
            d = l.length;for (c = 0; c < d; c++) {
          switch (l[c].once && this.removeListener(e, l[c].fn, void 0, !0), h) {case 1:
              l[c].fn.call(l[c].context);break;case 2:
              l[c].fn.call(l[c].context, t);break;case 3:
              l[c].fn.call(l[c].context, t, n);break;case 4:
              l[c].fn.call(l[c].context, t, n, r);break;default:
              if (!u) for (f = 1, u = new Array(h - 1); f < h; f++) {
                u[f - 1] = arguments[f];
              }l[c].fn.apply(l[c].context, u);}
        }
      }return !0;
    }, o.prototype.on = function (e, t, n) {
      var r = new i(t, n || this),
          o = a ? a + e : e;return this._events[o] ? this._events[o].fn ? this._events[o] = [this._events[o], r] : this._events[o].push(r) : (this._events[o] = r, this._eventsCount++), this;
    }, o.prototype.once = function (e, t, n) {
      var r = new i(t, n || this, !0),
          o = a ? a + e : e;return this._events[o] ? this._events[o].fn ? this._events[o] = [this._events[o], r] : this._events[o].push(r) : (this._events[o] = r, this._eventsCount++), this;
    }, o.prototype.removeListener = function (e, t, n, i) {
      var o = a ? a + e : e;if (!this._events[o]) return this;if (!t) return 0 == --this._eventsCount ? this._events = new r() : delete this._events[o], this;var s = this._events[o];if (s.fn) s.fn !== t || i && !s.once || n && s.context !== n || (0 == --this._eventsCount ? this._events = new r() : delete this._events[o]);else {
        for (var u = 0, c = [], l = s.length; u < l; u++) {
          (s[u].fn !== t || i && !s[u].once || n && s[u].context !== n) && c.push(s[u]);
        }c.length ? this._events[o] = 1 === c.length ? c[0] : c : 0 == --this._eventsCount ? this._events = new r() : delete this._events[o];
      }return this;
    }, o.prototype.removeAllListeners = function (e) {
      var t;return e ? (t = a ? a + e : e, this._events[t] && (0 == --this._eventsCount ? this._events = new r() : delete this._events[t])) : (this._events = new r(), this._eventsCount = 0), this;
    }, o.prototype.off = o.prototype.removeListener, o.prototype.addListener = o.prototype.on, o.prototype.setMaxListeners = function () {
      return this;
    }, o.prefixed = a, o.EventEmitter = o, e.exports = o;
  }, function (e, t) {
    function n(e) {
      return !!e.constructor && "function" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);
    }function r(e) {
      return "function" == typeof e.readFloatLE && "function" == typeof e.slice && n(e.slice(0, 0));
    } /*!
      * Determine if an object is a Buffer
      *
      * @author   Feross Aboukhadijeh <https://feross.org>
      * @license  MIT
      */
    e.exports = function (e) {
      return null != e && (n(e) || r(e) || !!e._isBuffer);
    };
  }, function (e, t, n) {
    !function (t) {
      var n = {},
          r = {};n.length = 0, n.getItem = function (e) {
        return r[e] || null;
      }, n.setItem = function (e, t) {
        void 0 === t ? n.removeItem(e) : (r.hasOwnProperty(e) || n.length++, r[e] = "" + t);
      }, n.removeItem = function (e) {
        r.hasOwnProperty(e) && (delete r[e], n.length--);
      }, n.key = function (e) {
        return Object.keys(r)[e] || null;
      }, n.clear = function () {
        r = {}, n.length = 0;
      }, e.exports = n;
    }();
  }, function (e, t, n) {
    !function () {
      var t = n(54),
          r = n(18).utf8,
          i = n(60),
          o = n(18).bin,
          s = function s(e, n) {
        e.constructor == String ? e = n && "binary" === n.encoding ? o.stringToBytes(e) : r.stringToBytes(e) : i(e) ? e = Array.prototype.slice.call(e, 0) : Array.isArray(e) || (e = e.toString());for (var a = t.bytesToWords(e), u = 8 * e.length, c = 1732584193, l = -271733879, h = -1732584194, f = 271733878, d = 0; d < a.length; d++) {
          a[d] = 16711935 & (a[d] << 8 | a[d] >>> 24) | 4278255360 & (a[d] << 24 | a[d] >>> 8);
        }a[u >>> 5] |= 128 << u % 32, a[14 + (u + 64 >>> 9 << 4)] = u;for (var p = s._ff, _ = s._gg, v = s._hh, y = s._ii, d = 0; d < a.length; d += 16) {
          var m = c,
              g = l,
              b = h,
              w = f;c = p(c, l, h, f, a[d + 0], 7, -680876936), f = p(f, c, l, h, a[d + 1], 12, -389564586), h = p(h, f, c, l, a[d + 2], 17, 606105819), l = p(l, h, f, c, a[d + 3], 22, -1044525330), c = p(c, l, h, f, a[d + 4], 7, -176418897), f = p(f, c, l, h, a[d + 5], 12, 1200080426), h = p(h, f, c, l, a[d + 6], 17, -1473231341), l = p(l, h, f, c, a[d + 7], 22, -45705983), c = p(c, l, h, f, a[d + 8], 7, 1770035416), f = p(f, c, l, h, a[d + 9], 12, -1958414417), h = p(h, f, c, l, a[d + 10], 17, -42063), l = p(l, h, f, c, a[d + 11], 22, -1990404162), c = p(c, l, h, f, a[d + 12], 7, 1804603682), f = p(f, c, l, h, a[d + 13], 12, -40341101), h = p(h, f, c, l, a[d + 14], 17, -1502002290), l = p(l, h, f, c, a[d + 15], 22, 1236535329), c = _(c, l, h, f, a[d + 1], 5, -165796510), f = _(f, c, l, h, a[d + 6], 9, -1069501632), h = _(h, f, c, l, a[d + 11], 14, 643717713), l = _(l, h, f, c, a[d + 0], 20, -373897302), c = _(c, l, h, f, a[d + 5], 5, -701558691), f = _(f, c, l, h, a[d + 10], 9, 38016083), h = _(h, f, c, l, a[d + 15], 14, -660478335), l = _(l, h, f, c, a[d + 4], 20, -405537848), c = _(c, l, h, f, a[d + 9], 5, 568446438), f = _(f, c, l, h, a[d + 14], 9, -1019803690), h = _(h, f, c, l, a[d + 3], 14, -187363961), l = _(l, h, f, c, a[d + 8], 20, 1163531501), c = _(c, l, h, f, a[d + 13], 5, -1444681467), f = _(f, c, l, h, a[d + 2], 9, -51403784), h = _(h, f, c, l, a[d + 7], 14, 1735328473), l = _(l, h, f, c, a[d + 12], 20, -1926607734), c = v(c, l, h, f, a[d + 5], 4, -378558), f = v(f, c, l, h, a[d + 8], 11, -2022574463), h = v(h, f, c, l, a[d + 11], 16, 1839030562), l = v(l, h, f, c, a[d + 14], 23, -35309556), c = v(c, l, h, f, a[d + 1], 4, -1530992060), f = v(f, c, l, h, a[d + 4], 11, 1272893353), h = v(h, f, c, l, a[d + 7], 16, -155497632), l = v(l, h, f, c, a[d + 10], 23, -1094730640), c = v(c, l, h, f, a[d + 13], 4, 681279174), f = v(f, c, l, h, a[d + 0], 11, -358537222), h = v(h, f, c, l, a[d + 3], 16, -722521979), l = v(l, h, f, c, a[d + 6], 23, 76029189), c = v(c, l, h, f, a[d + 9], 4, -640364487), f = v(f, c, l, h, a[d + 12], 11, -421815835), h = v(h, f, c, l, a[d + 15], 16, 530742520), l = v(l, h, f, c, a[d + 2], 23, -995338651), c = y(c, l, h, f, a[d + 0], 6, -198630844), f = y(f, c, l, h, a[d + 7], 10, 1126891415), h = y(h, f, c, l, a[d + 14], 15, -1416354905), l = y(l, h, f, c, a[d + 5], 21, -57434055), c = y(c, l, h, f, a[d + 12], 6, 1700485571), f = y(f, c, l, h, a[d + 3], 10, -1894986606), h = y(h, f, c, l, a[d + 10], 15, -1051523), l = y(l, h, f, c, a[d + 1], 21, -2054922799), c = y(c, l, h, f, a[d + 8], 6, 1873313359), f = y(f, c, l, h, a[d + 15], 10, -30611744), h = y(h, f, c, l, a[d + 6], 15, -1560198380), l = y(l, h, f, c, a[d + 13], 21, 1309151649), c = y(c, l, h, f, a[d + 4], 6, -145523070), f = y(f, c, l, h, a[d + 11], 10, -1120210379), h = y(h, f, c, l, a[d + 2], 15, 718787259), l = y(l, h, f, c, a[d + 9], 21, -343485551), c = c + m >>> 0, l = l + g >>> 0, h = h + b >>> 0, f = f + w >>> 0;
        }return t.endian([c, l, h, f]);
      };s._ff = function (e, t, n, r, i, o, s) {
        var a = e + (t & n | ~t & r) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + t;
      }, s._gg = function (e, t, n, r, i, o, s) {
        var a = e + (t & r | n & ~r) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + t;
      }, s._hh = function (e, t, n, r, i, o, s) {
        var a = e + (t ^ n ^ r) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + t;
      }, s._ii = function (e, t, n, r, i, o, s) {
        var a = e + (n ^ (t | ~r)) + (i >>> 0) + s;return (a << o | a >>> 32 - o) + t;
      }, s._blocksize = 16, s._digestsize = 16, e.exports = function (e, n) {
        if (void 0 === e || null === e) throw new Error("Illegal argument " + e);var r = t.wordsToBytes(s(e, n));return n && n.asBytes ? r : n && n.asString ? o.bytesToString(r) : t.bytesToHex(r);
      };
    }();
  }, function (e, t) {
    function n(e) {
      if (e = String(e), !(e.length > 100)) {
        var t = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if (t) {
          var n = parseFloat(t[1]);switch ((t[2] || "ms").toLowerCase()) {case "years":case "year":case "yrs":case "yr":case "y":
              return n * l;case "days":case "day":case "d":
              return n * c;case "hours":case "hour":case "hrs":case "hr":case "h":
              return n * u;case "minutes":case "minute":case "mins":case "min":case "m":
              return n * a;case "seconds":case "second":case "secs":case "sec":case "s":
              return n * s;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":
              return n;default:
              return;}
        }
      }
    }function r(e) {
      return e >= c ? Math.round(e / c) + "d" : e >= u ? Math.round(e / u) + "h" : e >= a ? Math.round(e / a) + "m" : e >= s ? Math.round(e / s) + "s" : e + "ms";
    }function i(e) {
      return o(e, c, "day") || o(e, u, "hour") || o(e, a, "minute") || o(e, s, "second") || e + " ms";
    }function o(e, t, n) {
      if (!(e < t)) return e < 1.5 * t ? Math.floor(e / t) + " " + n : Math.ceil(e / t) + " " + n + "s";
    }var s = 1e3,
        a = 60 * s,
        u = 60 * a,
        c = 24 * u,
        l = 365.25 * c;e.exports = function (e, t) {
      t = t || {};var o = typeof e === "undefined" ? "undefined" : _typeof(e);if ("string" === o && e.length > 0) return n(e);if ("number" === o && !1 === isNaN(e)) return t.long ? i(e) : r(e);throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));
    };
  }, function (e, t) {
    function n() {
      this._defaults = [];
    }["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects", "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert"].forEach(function (e) {
      n.prototype[e] = function () {
        return this._defaults.push({ fn: e, arguments: arguments }), this;
      };
    }), n.prototype._setDefaults = function (e) {
      this._defaults.forEach(function (t) {
        e[t.fn].apply(e, t.arguments);
      });
    }, e.exports = n;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      if (e) return i(e);
    }function i(e) {
      for (var t in r.prototype) {
        e[t] = r.prototype[t];
      }return e;
    }var o = n(21);e.exports = r, r.prototype.clearTimeout = function () {
      return clearTimeout(this._timer), clearTimeout(this._responseTimeoutTimer), delete this._timer, delete this._responseTimeoutTimer, this;
    }, r.prototype.parse = function (e) {
      return this._parser = e, this;
    }, r.prototype.responseType = function (e) {
      return this._responseType = e, this;
    }, r.prototype.serialize = function (e) {
      return this._serializer = e, this;
    }, r.prototype.timeout = function (e) {
      if (!e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e))) return this._timeout = e, this._responseTimeout = 0, this;for (var t in e) {
        switch (t) {case "deadline":
            this._timeout = e.deadline;break;case "response":
            this._responseTimeout = e.response;break;default:
            console.warn("Unknown timeout option", t);}
      }return this;
    }, r.prototype.retry = function (e, t) {
      return 0 !== arguments.length && !0 !== e || (e = 1), e <= 0 && (e = 0), this._maxRetries = e, this._retries = 0, this._retryCallback = t, this;
    };var s = ["ECONNRESET", "ETIMEDOUT", "EADDRINFO", "ESOCKETTIMEDOUT"];r.prototype._shouldRetry = function (e, t) {
      if (!this._maxRetries || this._retries++ >= this._maxRetries) return !1;if (this._retryCallback) try {
        var n = this._retryCallback(e, t);if (!0 === n) return !0;if (!1 === n) return !1;
      } catch (e) {
        console.error(e);
      }if (t && t.status && t.status >= 500 && 501 != t.status) return !0;if (e) {
        if (e.code && ~s.indexOf(e.code)) return !0;if (e.timeout && "ECONNABORTED" == e.code) return !0;if (e.crossDomain) return !0;
      }return !1;
    }, r.prototype._retry = function () {
      return this.clearTimeout(), this.req && (this.req = null, this.req = this.request()), this._aborted = !1, this.timedout = !1, this._end();
    }, r.prototype.then = function (e, t) {
      if (!this._fullfilledPromise) {
        var n = this;this._endCalled && console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"), this._fullfilledPromise = new Promise(function (e, t) {
          n.end(function (n, r) {
            n ? t(n) : e(r);
          });
        });
      }return this._fullfilledPromise.then(e, t);
    }, r.prototype.catch = function (e) {
      return this.then(void 0, e);
    }, r.prototype.use = function (e) {
      return e(this), this;
    }, r.prototype.ok = function (e) {
      if ("function" != typeof e) throw Error("Callback required");return this._okCallback = e, this;
    }, r.prototype._isResponseOK = function (e) {
      return !!e && (this._okCallback ? this._okCallback(e) : e.status >= 200 && e.status < 300);
    }, r.prototype.get = function (e) {
      return this._header[e.toLowerCase()];
    }, r.prototype.getHeader = r.prototype.get, r.prototype.set = function (e, t) {
      if (o(e)) {
        for (var n in e) {
          this.set(n, e[n]);
        }return this;
      }return this._header[e.toLowerCase()] = t, this.header[e] = t, this;
    }, r.prototype.unset = function (e) {
      return delete this._header[e.toLowerCase()], delete this.header[e], this;
    }, r.prototype.field = function (e, t) {
      if (null === e || void 0 === e) throw new Error(".field(name, val) name can not be empty");if (this._data && console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()"), o(e)) {
        for (var n in e) {
          this.field(n, e[n]);
        }return this;
      }if (Array.isArray(t)) {
        for (var r in t) {
          this.field(e, t[r]);
        }return this;
      }if (null === t || void 0 === t) throw new Error(".field(name, val) val can not be empty");return "boolean" == typeof t && (t = "" + t), this._getFormData().append(e, t), this;
    }, r.prototype.abort = function () {
      return this._aborted ? this : (this._aborted = !0, this.xhr && this.xhr.abort(), this.req && this.req.abort(), this.clearTimeout(), this.emit("abort"), this);
    }, r.prototype._auth = function (e, t, n, r) {
      switch (n.type) {case "basic":
          this.set("Authorization", "Basic " + r(e + ":" + t));break;case "auto":
          this.username = e, this.password = t;break;case "bearer":
          this.set("Authorization", "Bearer " + e);}return this;
    }, r.prototype.withCredentials = function (e) {
      return void 0 == e && (e = !0), this._withCredentials = e, this;
    }, r.prototype.redirects = function (e) {
      return this._maxRedirects = e, this;
    }, r.prototype.maxResponseSize = function (e) {
      if ("number" != typeof e) throw TypeError("Invalid argument");return this._maxResponseSize = e, this;
    }, r.prototype.toJSON = function () {
      return { method: this.method, url: this.url, data: this._data, headers: this._header };
    }, r.prototype.send = function (e) {
      var t = o(e),
          n = this._header["content-type"];if (this._formData && console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()"), t && !this._data) Array.isArray(e) ? this._data = [] : this._isHost(e) || (this._data = {});else if (e && this._data && this._isHost(this._data)) throw Error("Can't merge these send calls");if (t && o(this._data)) for (var r in e) {
        this._data[r] = e[r];
      } else "string" == typeof e ? (n || this.type("form"), n = this._header["content-type"], this._data = "application/x-www-form-urlencoded" == n ? this._data ? this._data + "&" + e : e : (this._data || "") + e) : this._data = e;return !t || this._isHost(e) ? this : (n || this.type("json"), this);
    }, r.prototype.sortQuery = function (e) {
      return this._sort = void 0 === e || e, this;
    }, r.prototype._finalizeQueryString = function () {
      var e = this._query.join("&");if (e && (this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + e), this._query.length = 0, this._sort) {
        var t = this.url.indexOf("?");if (t >= 0) {
          var n = this.url.substring(t + 1).split("&");"function" == typeof this._sort ? n.sort(this._sort) : n.sort(), this.url = this.url.substring(0, t) + "?" + n.join("&");
        }
      }
    }, r.prototype._appendQueryString = function () {
      console.trace("Unsupported");
    }, r.prototype._timeoutError = function (e, t, n) {
      if (!this._aborted) {
        var r = new Error(e + t + "ms exceeded");r.timeout = t, r.code = "ECONNABORTED", r.errno = n, this.timedout = !0, this.abort(), this.callback(r);
      }
    }, r.prototype._setTimeouts = function () {
      var e = this;this._timeout && !this._timer && (this._timer = setTimeout(function () {
        e._timeoutError("Timeout of ", e._timeout, "ETIME");
      }, this._timeout)), this._responseTimeout && !this._responseTimeoutTimer && (this._responseTimeoutTimer = setTimeout(function () {
        e._timeoutError("Response timeout of ", e._responseTimeout, "ETIMEDOUT");
      }, this._responseTimeout));
    };
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      if (e) return i(e);
    }function i(e) {
      for (var t in r.prototype) {
        e[t] = r.prototype[t];
      }return e;
    }var o = n(67);e.exports = r, r.prototype.get = function (e) {
      return this.header[e.toLowerCase()];
    }, r.prototype._setHeaderProperties = function (e) {
      var t = e["content-type"] || "";this.type = o.type(t);var n = o.params(t);for (var r in n) {
        this[r] = n[r];
      }this.links = {};try {
        e.link && (this.links = o.parseLinks(e.link));
      } catch (e) {}
    }, r.prototype._setStatusProperties = function (e) {
      var t = e / 100 | 0;this.status = this.statusCode = e, this.statusType = t, this.info = 1 == t, this.ok = 2 == t, this.redirect = 3 == t, this.clientError = 4 == t, this.serverError = 5 == t, this.error = (4 == t || 5 == t) && this.toError(), this.accepted = 202 == e, this.noContent = 204 == e, this.badRequest = 400 == e, this.unauthorized = 401 == e, this.notAcceptable = 406 == e, this.forbidden = 403 == e, this.notFound = 404 == e;
    };
  }, function (e, t, n) {
    "use strict";
    t.type = function (e) {
      return e.split(/ *; */).shift();
    }, t.params = function (e) {
      return e.split(/ *; */).reduce(function (e, t) {
        var n = t.split(/ *= */),
            r = n.shift(),
            i = n.shift();return r && i && (e[r] = i), e;
      }, {});
    }, t.parseLinks = function (e) {
      return e.split(/ *, */).reduce(function (e, t) {
        var n = t.split(/ *; */),
            r = n[0].slice(1, -1);return e[n[1].split(/ *= */)[1].slice(1, -1)] = r, e;
      }, {});
    }, t.cleanHeader = function (e, t) {
      return delete e["content-type"], delete e["content-length"], delete e["transfer-encoding"], delete e.host, t && (delete e.authorization, delete e.cookie), e;
    };
  }, function (e, t) {}]);
});
//# sourceMappingURL=av-weapp-min.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,